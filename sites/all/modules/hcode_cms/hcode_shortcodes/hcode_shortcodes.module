<?php

/**
 * Implementation of hook_menu().
 */
function hcode_shortcodes_menu() {
  variable_set('nd_visualshortcodes_extra_css', drupal_get_path('module', 'hcode_shortcodes') . '/css/hcode_shortcodes.css');
  $items = array();
  $items['admin/ajax/hcode_shortcodes/icons_autocomplete'] = array(
    'page callback' => 'hcode_shortcodes_ajax_icons_autocomplete',
    'access arguments' => array('administer nd visualshortcodes'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function hcode_shortcodes_ajax_icons_autocomplete($str) {
  $icons = array('icon-mobile', 'icon-laptop', 'icon-desktop', 'icon-tablet', 'icon-phone', 'icon-document', 'icon-documents', 'icon-search', 'icon-clipboard', 'icon-newspaper', 'icon-notebook', 'icon-book-open', 'icon-browser', 'icon-calendar', 'icon-presentation', 'icon-picture', 'icon-pictures', 'icon-video', 'icon-camera', 'icon-printer', 'icon-toolbox', 'icon-briefcase', 'icon-wallet', 'icon-gift', 'icon-bargraph', 'icon-grid', 'icon-expand', 'icon-focus', 'icon-edit', 'icon-adjustments', 'icon-ribbon', 'icon-hourglass', 'icon-lock', 'icon-megaphone', 'icon-shield', 'icon-trophy', 'icon-flag', 'icon-map', 'icon-puzzle', 'icon-basket', 'icon-envelope', 'icon-streetsign', 'icon-telescope', 'icon-gears', 'icon-key', 'icon-paperclip', 'icon-attachment', 'icon-pricetags', 'icon-lightbulb', 'icon-layers', 'icon-pencil', 'icon-tools', 'icon-tools-2', 'icon-scissors', 'icon-paintbrush', 'icon-magnifying-glass', 'icon-circle-compass', 'icon-linegraph', 'icon-mic', 'icon-strategy', 'icon-beaker', 'icon-caution', 'icon-recycle', 'icon-anchor', 'icon-profile-male', 'icon-profile-female', 'icon-bike', 'icon-wine', 'icon-hotairballoon', 'icon-globe', 'icon-genius', 'icon-map-pin', 'icon-dial', 'icon-chat', 'icon-heart', 'icon-cloud', 'icon-upload', 'icon-download', 'icon-target', 'icon-hazardous', 'icon-piechart', 'icon-speedometer', 'icon-global', 'icon-compass', 'icon-lifesaver', 'icon-clock', 'icon-aperture', 'icon-quote', 'icon-scope', 'icon-alarmclock', 'icon-refresh', 'icon-happy', 'icon-sad', 'icon-facebook', 'icon-twitter', 'icon-googleplus', 'icon-rss', 'icon-tumblr', 'icon-linkedin', 'icon-dribbble');
  $font_awesome = nd_visualshortcodes_fontawesome_icons();
  $icons = array_merge($icons, $font_awesome);
  $matches = array();
  foreach ($icons as $icon) {
    if(stripos($icon, $str) !== FALSE) {
      $matches[$icon] = $icon;
    }
  }
  drupal_json_output($matches);
}

/**
 * Implementation of hook_shortcode_info() .
 * Using the same formatting as hook_filter_info()`
 */
function hcode_shortcodes_shortcode_info() {
  $shortcodes['nd_menu'] = array(
    'title' => t('Menu'),
    'process callback' => 'hcode_shortcodes_shortcode_menu',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hcode_shortcodes_shortcode_menu_settings',
    'icon' => 'fa fa-bars',
  );
  $shortcodes['nd_container'] = array(
    'title' => t('Container 1170px'),
    'description' => t('Container for content.'),
    'process callback' => 'hcode_shortcodes_shortcode_container',
    'icon' => 'fa fa-hdd-o',
  );
  $shortcodes['nd_div'] = array(
    'title' => t('DIV Container'),
    'process callback' => 'hcode_shortcodes_shortcode_div',
    'icon' => 'fa fa-folder-o',
  );
  $shortcodes['row'] = array(
    'title' => t('Row for columns'),
    'description' => t('Container for cols.'),
    'process callback' => 'hcode_shortcodes_shortcode_row',
    'process backend callback' => 'nd_visualshortcodes_backend_row',
    'icon' => 'fa fa-th-large',
    'child shortcode' => 'col'
  );
  $shortcodes['col'] = array(
    'title' => t('Column'),
    'description' => t('Column with size settings'),
    'process callback' => 'hcode_shortcodes_shortcode_col',
    'process backend callback' => 'nd_visualshortcodes_backend_col',
    'process settings callback' => 'nd_visualshortcodes_shortcode_col_settings',
    'icon' => 'fa fa-columns'
  );
  $shortcodes['nd_view'] = array(
    'title' => t('View'),
    'description' => t('Embed content - rendered View.'),
    'process callback' => 'hcode_shortcodes_shortcode_view',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hcode_shortcodes_shortcode_view_settings',
    'icon' => 'fa fa-sun-o',
    'description_callback' => 'hcode_shortcodes_shortcode_view_description',
  );
  $shortcodes['nd_block'] = array(
    'title' => t('Block'),
    'description' => t('Render block.'),
    'process callback' => 'hcode_shortcodes_shortcode_block',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hcode_shortcodes_shortcode_block_settings',
    'icon' => 'fa fa-file',
    'description_callback' => 'hcode_shortcodes_shortcode_block_description',
  );
  $shortcodes['nd_node'] = array(
    'title' => t('Node'),
    'description' => t('Render node'),
    'process callback' => 'hcode_shortcodes_shortcode_node',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hcode_shortcodes_shortcode_node_settings',
    'icon' => 'fa fa-file-o',
    'description_callback' => 'hcode_shortcodes_shortcode_node_description',
  );
  $shortcodes['html'] = array(
    'title' => t('HTML'),
    'description' => t('HTML code'),
    'process callback' => 'hcode_shortcodes_shortcode_html',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hcode_shortcodes_shortcode_html_settings',
    'icon' => 'fa fa-code',
    'description_field' => 'text',
    'backend preview' => TRUE,
  );
  $shortcodes['nd_title'] = array(
    'title' => t('Title'),
    'process callback' => 'hcode_shortcodes_shortcode_title',
    'process settings callback' => 'hcode_shortcodes_shortcode_title_settings',
    'icon' => 'fa fa-h-square',
    'description_field' => 'title',
    'backend preview' => TRUE,
  );
  $shortcodes['bg'] = array(
    'title' => t('Background'),
    'description' => t('Background for content'),
    'process callback' => 'hcode_shortcodes_shortcode_bg',
    'process settings callback' => 'hcode_shortcodes_shortcode_bg_settings',
    'icon' => 'fa fa-file-image-o',
  );
  $shortcodes['feature'] = array(
    'title' => t('Feature'),
    'process callback' => 'hcode_shortcodes_shortcode_feature',
    'process settings callback' => 'hcode_shortcodes_shortcode_feature_settings',
    'icon' => 'fa fa-gears',
    'description_field' => 'title',
  );
  $shortcodes['accordions'] = array(
    'title' => t('Accordion container'),
    'description' => t('Animated Accordions wrapper.'),
    'process callback' => 'hcode_shortcodes_shortcode_accordions',
    'process settings callback' => 'hcode_shortcodes_shortcode_accordions_settings',
    'child shortcode' => 'accordion',
    'icon' => 'fa fa-bars'
  );
  $shortcodes['accordion'] = array(
    'title' => t('Accordion item'),
    'description' => t('Accordion item.'),
    'process callback' => 'hcode_shortcodes_shortcode_accordion',
    'process settings callback' => 'hcode_shortcodes_shortcode_accordion_settings',
    'icon' => 'fa fa-minus',
    'description_field' => 'title',
  );
  $shortcodes['button'] = array(
    'title' => t('Button'),
    'description' => t('Button linked to any page or content.'),
    'process callback' => 'hcode_shortcodes_shortcode_button',
    'process settings callback' => 'hcode_shortcodes_shortcode_button_settings',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'icon' => 'fa fa-bold',
    'description_field' => 'Button',
  );
  $shortcodes['progress_bar_box'] = array(
    'title' => t('Progress Bar Container'),
    'process callback' => 'hcode_shortcodes_shortcode_progress_box',
    'process settings callback' => 'hcode_shortcodes_shortcode_progress_box_settings',
    'child shortcode' => 'progress_bar',
    'icon' => 'fa fa-object-group',
  );
  $shortcodes['progress_bar'] = array(
    'title' => t('Progress Bar'),
    'process callback' => 'hcode_shortcodes_shortcode_progress',
    'process settings callback' => 'hcode_shortcodes_shortcode_progress_settings',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'icon' => 'fa fa-tasks',
  );
  $shortcodes['pricing_box'] = array(
    'title' => t('Pricing Box'),
    'process callback' => 'hcode_shortcodes_shortcode_pricing_box',
    'process settings callback' => 'hcode_shortcodes_shortcode_pricing_box_settings',
    'icon' => 'fa fa-dollar',
    'child shortcode' => 'pricing_item',
  );
  $shortcodes['pricing_item'] = array(
    'title' => t('Pricing Item'),
    'process callback' => 'hcode_shortcodes_shortcode_pricing_item',
    'process settings callback' => 'hcode_shortcodes_shortcode_pricing_item_settings',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'icon' => 'fa fa-dollar',
  );
  $shortcodes['hr'] = array(
    'title' => t('HR Separator Line'),
    'process callback' => 'hcode_shortcodes_shortcode_hr',
    'process settings callback' => 'hcode_shortcodes_shortcode_hr_settings',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'icon' => 'fa fa-ellipsis-h',
  );
  $shortcodes['icon'] = array(
    'title' => t('Icon'),
    'description' => t('Icon with its name'),
    'process callback' => 'hcode_shortcodes_shortcode_icon',
    'process settings callback' => 'hcode_shortcodes_shortcode_icon_settings',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'icon' => 'fa fa-image',
  );
  $shortcodes['nd_message'] = array(
    'title' => t('Message'),
    'description' => t('Messages'),
    'process callback' => 'hcode_shortcodes_shortcode_message',
    'icon' => 'fa fa-exclamation',
    'process settings callback' => 'hcode_shortcodes_shortcode_message_settings',
    'child shortcode' => 'html',
  );
  $shortcodes['slider'] = array(
    'title' => t('Slider container'),
    'description' => t('Slider for any content'),
    'process callback' => 'hcode_shortcodes_shortcode_slider',
    'process settings callback' => 'hcode_shortcodes_shortcode_slider_settings',
    'icon' => 'fa fa-arrows-h',
    'child shortcode' => 'slider_item',
    'description_field' => 'type',
  );
  $shortcodes['slider_item'] = array(
    'title' => t('Slider'),
    'description' => t('Slider item'),
    'process callback' => 'hcode_shortcodes_shortcode_slider_item',
    'icon' => 'fa fa-long-arrow-right'
  );
  $shortcodes['nd_quote'] = array(
    'title' => t('Quote'),
    'process callback' => 'hcode_shortcodes_shortcode_quote',
    'process settings callback' => 'hcode_shortcodes_shortcode_quote_settings',
    'icon' => 'fa fa-quote-right',
    'child shortcode' => 'html',
  );
  $shortcodes['nd_image'] = array(
    'title' => t('Image'),
    'process callback' => 'hcode_shortcodes_shortcode_image',
    'process settings callback' => 'hcode_shortcodes_shortcode_image_settings',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'icon' => 'fa fa-file-image-o',
    'backend preview' => TRUE,
  );
  $shortcodes['nd_tabs'] = array(
    'title' => t('Tabs container'),
    'process callback' => 'hcode_shortcodes_shortcode_tabs',
    'process settings callback' => 'hcode_shortcodes_shortcode_tabs_settings',
    'icon' => 'fa fa-folder-open',
    'child shortcode' => 'nd_tab',
    'description_field' => 'type',
  );
  $shortcodes['nd_tab'] = array(
    'title' => t('Tab'),
    'process callback' => 'hcode_shortcodes_shortcode_tab',
    'process settings callback' => 'hcode_shortcodes_shortcode_tab_settings',
    'icon' => 'fa fa-folder',
    'description_field' => 'title',
  );
  $shortcodes['drop_caps'] = array(
    'title' => t('Drop Caps'),
    'process callback' => 'hcode_shortcodes_shortcode_drop_caps',
    'process settings callback' => 'hcode_shortcodes_shortcode_drop_caps_settings',
    'icon' => 'fa fa-font',
    'description_field' => 'title',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
  );
  $shortcodes['deviders_header'] = array(
    'title' => t('Deviders Header'),
    'process callback' => 'hcode_shortcodes_shortcode_deviders_header',
    'process settings callback' => 'hcode_shortcodes_shortcode_deviders_header_settings',
    'icon' => 'fa fa-h-square',
    'description_field' => 'title',
  );
  $shortcodes['counter'] = array(
    'title' => t('Counter'),
    'process callback' => 'hcode_shortcodes_shortcode_counter',
    'process settings callback' => 'hcode_shortcodes_shortcode_counter_settings',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'icon' => 'fa fa-sort-numeric-asc',
  );
  $shortcodes['nd_video'] = array(
    'title' => t('Video'),
    'process callback' => 'hcode_shortcodes_shortcode_video',
    'process settings callback' => 'hcode_shortcodes_shortcode_video_settings',
    'icon' => 'fa fa-video-camera',
    'description_field' => 'title',
  );
  $shortcodes['header'] = array(
    'title' => t('Page Title'),
    'process callback' => 'hcode_shortcodes_shortcode_header',
    'process backend callback' => 'nd_visualshortcodes_backend_nochilds',
    'process settings callback' => 'hcode_shortcodes_shortcode_header_settings',
    'icon' => 'fa fa-header',
    'description_field' => 'title',
  );
  return $shortcodes;
}

/**
 * Implements hook_theme().
 */
function hcode_shortcodes_theme($existing, $type, $theme, $path) {
  $theme = array(
    'hcode_project_next_prev' => array(
      'variables' => array('prev' => '', 'next' => '', 'all_works' => ''),
    ),
    'hcode_shortcodes_menu' => array(
      'variables' => array('menu' => '', 'logo' => '', 'transparent' => 0, 'color' => 'dark', 'language' => FALSE, 'stick_fixed' => ''),
      'template' => 'hcode-shortcodes-menu'
    )
  );
  return $theme;
}

function hcode_shortcodes_shortcode_menu($attrs, $text) {
  $color = isset($attrs['type']) ? $attrs['type'] : theme_get_setting('menu_color');
  $transparent = isset($attrs['transparent']) ? $attrs['transparent'] : theme_get_setting('menu_transparent');
  $search = isset($attrs['search']) ? $attrs['search'] : theme_get_setting('menu_search');
  $cart = isset($attrs['cart']) ? $attrs['cart'] : FALSE;
  $menu = isset($attrs['menu']) ? $attrs['menu'] : 'main-menu';
  $language = isset($attrs['language']) ? $attrs['language'] : FALSE;
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $logo = isset($file->uri) ? file_create_url($file->uri) : theme_get_setting('logo');
  $file_sticky = isset($attrs['fid_sticky']) && !empty($attrs['fid_sticky']) ? file_load($attrs['fid_sticky']) : '';
  $logo_sticky = isset($file_sticky->uri) ? file_create_url($file_sticky->uri) : theme_get_setting('logo');
  
  $output = theme('hcode_shortcodes_menu', array('menu' => $menu, 'logo' => $logo, 'color' => $color, 'logo_sticky' => $logo_sticky, 'search' => $search, 'cart' => $cart));
  $attrs_output = _hcode_shortcodes_shortcode_attributes($attrs);
  if ($attrs_output) {
    $output = '<div ' . $attrs_output . '>' . $output . '</div>';
  }
  return $output;
}

function _hcode_cart_count() {
  global $user;
  $quantity = 0;
  $order = commerce_cart_order_load($user->uid);
  if ($order) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $wrapper->commerce_line_items;
    $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
  }
  return $quantity;
}

function hcode_shortcodes_shortcode_menu_settings($attrs, $text) {
  $menus = menu_get_menus();
  $form['menu'] = array(
    '#type' => 'select',
    '#title' => t('Menu'),
    '#default_value' => isset($attrs['menu']) ? $attrs['menu'] : '',
    '#options' => $menus,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $filename = isset($file->uri) ? $file->uri : '';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '</div><div class = "col-sm-4">',
  );
  $file = isset($attrs['fid_sticky']) && !empty($attrs['fid_sticky']) ? file_load($attrs['fid_sticky']) : '';
  $filename = isset($file->uri) ? $file->uri : '';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid_sticky'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo on sticky mode'),
    '#default_value' => isset($attrs['fid_sticky']) ? $attrs['fid_sticky'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>'
  );
  $types = array('white' => t('White'), ' nav-white nav-dark' => t('Dark'), ' nav-white'=> t('Transparent'), ' nav-transp-dark'=> t('Transparent Dark'));
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Background Type'),
    '#options' => $types,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : 'white',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">'
  );
  $form['search'] = array(
    '#type' => 'checkbox',
    '#title' => t('Search Box'),
    '#default_value' => isset($attrs['search']) ? $attrs['search'] : TRUE,
    '#prefix' => '</div><div class = "col-sm-3">'
  );
  $form['cart'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cart'),
    '#default_value' => isset($attrs['cart']) ? $attrs['cart'] : FALSE,
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function _hcode_shortcodes_shortcode_attributes($attrs) {
  if(empty($attrs)) {
    return '';
  }
  $allowed_attributes = array('class' => 'class', 'href' => 'href', 'id' => 'id', 'animation' => 'class', 'animation_delay' => 'data-wow-delay', 'data-background' => 'data-background', 'style' => 'style', 'extra_style' => 'style');
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : ''; 
  if (isset($attrs['link']) && $attrs['link'] == $_GET['q']) {
    $attrs['class'] .= ' active'; 
  }
  if (isset($attrs['animation']) && $attrs['animation']) {
    if(isset($attrs['animation_delay'])) {
      $attrs['animation_delay'] = ($attrs['animation_delay'] / 1000) . 's';
    }
    $attrs['class'] .= ' wow'; 
  }

  $attrs['class'] .= isset($attrs['extra_classes']) ? ' ' . $attrs['extra_classes'] : '';
  $output = '';
  $attrs_array = array('class' => '');
  foreach($attrs as $name => $value) {
    $value = trim($value);
    if(strpos($name, 'style_') === 0) {
      $value_style = str_replace(array('style_', '_'), array('', '-'), $name);
      if(strpos($value_style, 'border-radius') !== FALSE) {
        $value = strpos($value, '%') !== FALSE ? $value : (int)$value . 'px;';
        $value = '-webkit-' . $value_style. ': ' . $value . '; -moz-' . $value_style. ': ' . $value . '; ' . $value_style. ': ' . $value . ';';
      }
      elseif(strpos($name, 'margin') !== FALSE || strpos($name, 'padding') !== FALSE || strpos($name, 'width') !== FALSE || strpos($name, 'height') !== FALSE) {
        $value = strpos($value, '%') !== FALSE ? $value : (int)$value . 'px;';
        $value =  $value_style . ': ' . $value;
      }
      elseif(strpos($name, 'color') !== FALSE) {
        $value =  $value_style . ': #' . trim($value, '#') . ';';
      }
      elseif(strpos($value_style, 'image') !== FALSE) {
        $file = file_load($value);
        $filename = isset($file->uri) ? file_create_url($file->uri) : '';
        $value =  $value_style . ': url("' . $filename . '");';
      }
      else {
        $value = $value_style . ': ' . $value . ';';
      }
      $name = 'style';
    }
    if(isset($allowed_attributes[$name])) {
      $name = $allowed_attributes[$name];
      if ($value !== '') {
        $attrs_array[$name] = (isset($attrs_array[$name]) ? $attrs_array[$name] . ' ' : '') . $value;
      }
    }
    elseif(strpos($name, 'data-') === 0) {
      if ($value !== '') {
        $attrs_array[$name] = (isset($attrs_array[$name]) ? $attrs_array[$name] . ' ' : '') . $value;
      }
    }
  }
  if(isset($attrs['style_background_color']) && strtolower(trim($attrs['style_background_color'], '#')) == '000000') {
    $attrs_array['class'] .= ' text-white';
  }
  if(isset($attrs['style_background_color']) && strtolower(trim($attrs['style_background_color'], '#')) == 'ffffff') {
    $attrs_array['class'] .= ' text-black';
  }
  if(isset($attrs['text_align']) && $attrs['text_align']) {
    $attrs_array['style'] = (isset($attrs_array['style']) ? $attrs_array['style'] : '') . ' text-align:'. $attrs['text_align'] . ';';
    //$attrs_array['class'] .= ' text-center';
  }

  foreach($attrs_array as $name => $value) {
    if($value) {
      $output .= " $name = '$value'";
    }
  }
  return $output;
}

function hcode_shortcodes_shortcode_view($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $view = '';
  if (strpos($attrs['admin_url'], 'admin/structure/views/view') !== FALSE) {
    $view_name = substr($attrs['admin_url'], strpos($attrs['admin_url'], 'view/') + 5);
    $parts = explode('/', $view_name);
    $view_name = $parts[0];
    $view = isset($parts[2]) ? views_embed_view($view_name, $parts[2]) : views_embed_view($view_name);
  }
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>' . $view . '</div>';
  return $text;
}

function hcode_shortcodes_shortcode_view_settings($attrs, $text) {
  $views = views_get_all_views();
  $displays = array();
  foreach ($views as $view) {
    foreach($view->display as $display) {
      if($display->display_title != 'Master') {
        $displays['admin/structure/views/view/' . $view->name . '/edit/' . $display->id] = check_plain($view->human_name . ': ' . $display->display_title);
      }
    }
  }
  $form['admin_url'] = array(
    '#title' => t('View'),
    '#type' => 'select',
    '#options' => $displays,
    '#default_value' => isset($attrs['admin_url']) ? $attrs['admin_url'] : '',
    '#attributes' => array('class' => array('form-control'))
  );
  return $form;
}

function hcode_shortcodes_shortcode_view_description($attrs, $text) {
  if (strpos($attrs['admin_url'], 'admin/structure/views/view') !== FALSE) {
    $form = hcode_shortcodes_shortcode_view_settings($attrs, $text);
    $value = l($form['admin_url']['#options'][$attrs['admin_url']], $attrs['admin_url'], array('attributes' => array('target' => '_blank')));
    return $value;
  }
}

function hcode_shortcodes_shortcode_block($attrs, $text) {
  if (strpos($attrs['admin_url'], 'admin/structure/block') !== FALSE) {
    $block_name = substr($attrs['admin_url'], strpos($attrs['admin_url'], '/manage/') + 8);
    $parts = explode('/', $block_name);
    $block = _nikadevs_render_block($parts[0], $parts[1]);
    $block = render($block);
  }
  $attrs_output = _hcode_shortcodes_shortcode_attributes($attrs);
  $text = $attrs_output ? '<div ' . $attrs_output  . '>' . $block . '</div>' : $block;
  return $text;
}

function hcode_shortcodes_shortcode_block_tip($format, $long) {
  $output = array();
  $output[] = '<p><strong>Block:</strong><br/>[block admin_url = "admin/structure/block/manage/hcode_cms/gmap/configure"][/block]</br>';
  $output[] = '<strong>admin_url</strong> - URL of the block edit page.</p>';
  return implode(' ', $output);
}

function hcode_shortcodes_shortcode_block_settings($attrs, $text) {
  module_load_include('inc', 'block', 'block.admin');
  $current_theme = variable_get('theme_default', 'none');
  $blocks = block_admin_display_prepare_blocks($current_theme);
  usort($blocks, '_sort_blocks');
  $options = array();
  foreach ($blocks as $block) {
    $options['admin/structure/block/manage/' . $block['module']  .'/' . $block['delta'] . '/configure'] = check_plain($block['info']);
  }
  asort($options);
  $form['admin_url'] = array(
    '#title' => t('Block'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($attrs['admin_url']) ? $attrs['admin_url'] : '',
    '#attributes' => array('class' => array('form-control'))
  );
  return $form;
}

function hcode_shortcodes_shortcode_block_description($attrs, $text) {
  if (strpos($attrs['admin_url'], 'admin/structure/block') !== FALSE) {
    $form = hcode_shortcodes_shortcode_block_settings($attrs, $text);
    $value = l($form['admin_url']['#options'][$attrs['admin_url']], $attrs['admin_url'], array('attributes' => array('target' => '_blank')));
    return $value;
  }
}

function hcode_shortcodes_shortcode_node($attrs, $text) {
  if (isset($attrs['admin_url']) && strpos($attrs['admin_url'], 'node/') !== FALSE) {
    $node_name = substr($attrs['admin_url'], strpos($attrs['admin_url'], 'node/') + 5);
    $parts = explode('/', $node_name);
    $node = node_load($parts[0]);
    if(isset($node->nid) && $node->nid) {
      $node = node_view($node);
      $output = render($node);
      $attrs = _hcode_shortcodes_shortcode_attributes($attrs);
      $text = $attrs ? '<div ' . $attrs  . '>' . $output . '</div>' : $output;
      return $text;
    }
  }
}

function hcode_shortcodes_shortcode_node_tip($format, $long) {
  $output = array();
  $output[] = '<p><strong>Node:</strong><br/>[node admin_url = "node/1/edit"][/node]</br>';
  $output[] = '<strong>admin_url</strong> - URL of the node edit page.</p>';
  return implode(' ', $output);
}

function hcode_shortcodes_shortcode_node_description($attrs, $text) {
  if (strpos($attrs['admin_url'], 'node/') !== FALSE) {
    $node_name = substr($attrs['admin_url'], strpos($attrs['admin_url'], 'node/') + 5);
    $parts = explode('/', $node_name);
    $nid = $parts[0];
    if(is_numeric($nid)) {
      $node = node_load($nid);
      return l($node->title, 'node/' . $nid . '/edit', array('attributes' => array('target' => '_blank')));
    }
  }
}

function hcode_shortcodes_shortcode_node_settings($attrs, $text) {
  $form['admin_url'] = array(
    '#title' => t('Node Title'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'admin/ajax/nd_visualshortcodes/node_autocomplete',
    '#default_value' => isset($attrs['admin_url']) ? $attrs['admin_url'] : '',
    '#attributes' => array('class' => array('form-control'))
  );
  return $form;
}

function hcode_shortcodes_shortcode_container($attrs, $text) {
  $attrs['class'] = 'container ' . (isset($attrs['class']) ? $attrs['class'] : '');
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) .'>' . $text . '</div>';
  return $text;
}

function hcode_shortcodes_shortcode_container_tip($format, $long) {
  $output = array();
  $output[] = '<p><strong>Responsive container:</strong><br/>[container]Content[/container]</br>';
  $output[] = 'Use this for non-full width content.</p>';
  $output[] = '<p><strong>Responsive columns:</strong><br/>[row]<br/>[col phone = 12 tablet = 12 desktop = 6 wide = 6]Content with date[/col][/row]</br>';
  $output[] = 'Describe how many rows will take col in different devices: phone, tablet, desktop, wide. From 1 to 12 rows.</p>';
  return implode(' ', $output);
}

function hcode_shortcodes_shortcode_div($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] . ' ' : '';
  $attrs['class'] .= isset($attrs['vertical_align']) && $attrs['vertical_align'] ? 'home-text ': '';
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) .'>' . $text . '</div>';
  if(isset($attrs['vertical_align']) && $attrs['vertical_align'] ) {
    $text = '<div class = "home-content">' . $text . '</div>';
  }
  return $text;
}

function hcode_shortcodes_shortcode_div_settings($attrs, $text) {
  $form['vertical_align'] = array(
    '#title' => t('Vertical Align'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['vertical_align']) ? $attrs['vertical_align'] : FALSE,
  );
  return $form;
}

function hcode_shortcodes_shortcode_row($attrs, $text) {
  $attrs['class'] = 'row ' . (isset($attrs['class']) ? $attrs['class'] : '');
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) .'>' . $text . '</div>';
  return $text;
}

function hcode_shortcodes_shortcode_col($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  if(isset($attrs['phone'])) {
    $attrs['class'] .= ' col-xs-' . $attrs['phone'];
  }
  if(isset($attrs['tablet'])) {
    $attrs['class'] .= ' col-sm-' . $attrs['tablet'];
  }
  if(isset($attrs['desktop'])) {
    $attrs['class'] .= ' col-md-' . $attrs['desktop'];
  }
  if(isset($attrs['wide'])) {
    $attrs['class'] .= ' col-lg-' . $attrs['wide'];
  }
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</div>';
  return $text;
}

function hcode_shortcodes_shortcode_html($attrs, $text) {
  $attrs['class'] = (isset($attrs['class']) ? $attrs['class'] : '') . (isset($attrs['p_classes']) && $attrs['p_classes'] ? ' ' . $attrs['p_classes'] : '');
  if (isset($attrs['font_weight']) && $attrs['font_weight'] != '') {
    $attrs['style'] = 'font-weight: ' . $attrs['font_weight'] .';';
  }
  // Made a little hack for tables which can't be controled because rendered some WYSIWYG editor, and also list styles
  $text = str_replace(array('<ul>', '<ol>'), array('<ul class = "list">', '<ol class = "list">'), $text);
  $attrs_output = _hcode_shortcodes_shortcode_attributes($attrs);
  if($attrs_output) {
    return '<div ' . $attrs_output . '>' . $text . '</div>';
  }
  return $text;
}

function hcode_shortcodes_shortcode_html_settings($attrs, $text) {
  $form = nd_visualshortcodes_shortcode_html_settings($attrs, $text);
  $classes = array(
    '' => t('None'),
    'text-small' => t('Small Text'),
    'text-med' => t('Medium Text'),
    'light-gray-text text-med' => t('Medium Text Gray'),
    'text-large' => t('Large Text'),
    'text-large-full-width' => t('Large Text 22px'),
    'text-extra-large' => t('Extra Large Text'),
    'title-large' => t('Large Title'),
    'title-med' => t('Medium Title'),
    'title-small' => t('Small Title')
  );
  $form['p_classes'] = array(
    '#type' => 'select',
    '#title' => t('Text Options'),
    '#options' => $classes,
    '#default_value' => isset($attrs['p_classes']) ? $attrs['p_classes'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['font_weight'] = array(
    '#type' => 'select',
    '#title' => t('Font Weight'),
    '#options' => array(
      '' => t('None'),
      'normal' => t('Normal'),
      '100' => t('100'),
      '300' => t('300'),
      '400' => t('400'),
      '500' => t('500'),
      '600' => t('600')
    ),
    '#default_value' => isset($attrs['font_weight']) ? $attrs['font_weight'] : 'normal',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hcode_shortcodes_shortcode_title($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $size = isset($attrs['size']) ? $attrs['size'] : 'h3';
  $attrs['title'] = isset($attrs['title']) ? $attrs['title'] : '';
  $attrs['class'] .= isset($attrs['no_transform']) && $attrs['no_transform']? ' text-transform-none' : '';
  $attrs['font_color'] = isset($attrs['font_color']) ? $attrs['font_color'] : '';
  if($attrs['strong']) {
    $text = '<strong class="' . $attrs['font_color'] . '">' . $attrs['title'] . '</strong>' . $text;
  }
  else {
    $text = $attrs['title'] . $text;
  }
  if(!$attrs['strong'] && $attrs['font_color'] != '') {
    $attrs['class'] .= ' ' . $attrs['font_color'];
  }  
  $text = '<'. $size . ' ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</' . $size . '>';
  return $text;
}

function hcode_shortcodes_shortcode_title_settings($attrs, $text) {
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $size = array('h1' => t('H1'), 'h2' => t('H2'), 'h3' => t('H3'), 'h4' => t('H4'), 'h5' => t('H5'), 'h6' => t('H6'));
  $form['size'] = array(
    '#title' => t('Size'),
    '#type' => 'select',
    '#options' => $size,
    '#default_value' => isset($attrs['size']) ? $attrs['size'] : 'h6',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $font_color = array(
    '' => 'None',
    'white-text' => t('White'),
    'gray-text' => t('Gray'),
    'black-text' => t('Black'),
  );
  $form['font_color'] = array(
    '#title' => t('Font color'),
    '#type' => 'select',
    '#options' => $font_color,
    '#default_value' => isset($attrs['font_color']) ? $attrs['font_color'] : 'black-text',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>'
  );
  $form['strong'] = array(
    '#title' => t('Strong font'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['strong']) ? $attrs['strong'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['no_transform'] = array(
    '#title' => t('Original Style'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['no_transform']) ? $attrs['no_transform'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hcode_shortcodes_shortcode_bg($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  if (isset($attrs['video']) && $attrs['video']) {
    switch (substr(file_create_url($file->uri), strrpos(file_create_url($file->uri), '.'))) {
      case '.mp4':
        $source = '<source type="video/mp4" src="' . file_create_url($file->uri) . '">';
        break;
      case '.ogg':
        $source = '<source type="video/ogg" src="' . file_create_url($file->uri) . '">';
        break;
      case '.webm':
        $source = '<source type="video/webm" src="' . file_create_url($file->uri) . '">';
    }
    $attrs['video_title'] = isset($attrs['video_title']) ? $attrs['video_title'] : '';
    $attrs['options'] = isset($attrs['options']) ? $attrs['options'] : 'half-background';
    switch ($attrs['options']) {
      case 'background':
        if (isset($text) && $text != ''){
          $attrs['class'] .= ' no-padding full-screen cover-background';
          $text = '<div class="video-background  fit-videos">
                    <div class="container full-screen position-relative">' . $text . '
                    </div>
                  </div>';
        }
        else {
          $attrs['class'] .= ' no-padding video-half-screen position-relative overflow-hidden cover-background';
        }
        $text = '<section ' . _hcode_shortcodes_shortcode_attributes($attrs) . ' style="background-image:url(\'../images/video-bg1.jpg\');">' . $text . '
                  <div class="video-wrapper z-index-0">
                  <!-- video -->
                    <video autoplay muted loop class="html-video">' . $source . '
                    </video>
                  <!-- end video -->
                  </div>
                </section>';
        break;
      case 'gradient-overlay':
        $attrs['class'] .= ' full-screen no-padding cover-background';
        $text = '<section ' . _hcode_shortcodes_shortcode_attributes($attrs) . ' style="background-image:url(\'../images/video-bg1.jpg\');">
                  <div class="container-fluid full-screen position-relative no-padding" >
                      <div class="opacity-light gradient-overlay"></div>
                      <div class="video-wrapper">
                          <video autoplay muted loop class="html-video">' . $source . '
                          </video>
                      </div>' . $text . '
                  </div>
              </section>';
        break;
      default:
        $attrs['class'] .= ' no-padding overflow-hidden position-relative cover-background';
        $text = '<section ' . _hcode_shortcodes_shortcode_attributes($attrs) . ' style="background-image:url(\'../images/video-bg1.jpg\');">
                  <div class="opacity-light bg-black"></div>
                  <div class="container-fuild">
                      <div class="video-wrapper position-top z-index-0">
                          <video autoplay muted loop class="html-video">' . $source . '
                          </video>
                      </div>
                      <div class="slider-text-middle2 animated fadeInUp position-relative text-center margin-ten">
                        <span class="slider-subtitle2 white-text">' . $attrs['video_title'] . '</span>' . $text . '
                      </div>
                  </div>
                </section>';
    }
  }
  else {
    if (isset($file->uri)) {
      $slider = isset($attrs['slider']) && $attrs['slider'] ? '<div class="slider-overlay bg-slider"></div>' : '';
      if (isset($attrs['no_parallax']) && $attrs['no_parallax']) {
        $attrs['style'] = 'background-image:url("' . file_create_url($file->uri) . '");';
      }
      else {
        $attrs['class'] .= ' parallax2 parallax-fix';
      $text = '<img class="parallax-background-img" src="' . file_create_url($file->uri) . '" alt = ""/>' . $slider . $text;
      }
    }
    else {
      $attrs['class'] .= isset($attrs['color']) ? ' ' . $attrs['color'] : 'bg-white';
    }
    $text = '<section ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</section>';
  }
  $text .= '<div class = "after-parallax-anchor"></div>';
  return $text;
}

function hcode_shortcodes_shortcode_bg_settings($attrs, $text) {
  $colors = array('' => t('White'), 'border-top' => t('White Top Border'), 'bg-fast-yellow' => t('Yellow'), 'bg-gray' => t('Gray'), 'bg-dark-gray' => t('Dark Gray'), 'bg-black' => t('Black'));
  $form['color'] = array(
    '#type' => 'select',
    '#title' => t('Color'),
    '#options' => $colors,
    '#default_value' => isset($attrs['color']) ? $attrs['color'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['slider'] = array(
    '#title' => t('Slider Background'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['slider']) ? $attrs['slider'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Image or Video'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $form['no_parallax'] = array(
    '#title' => t('No Parallax'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['no_parallax']) ? $attrs['no_parallax'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  $form['video'] = array(
    '#title' => t('Video Section'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['video']) ? $attrs['video'] : FALSE,
    '#attributes' => array('class' => array('form-control', 'video')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['options'] = array(
    '#title' => t('Video Options'),
    '#type' => 'select',
    '#options' => array(
      'default' => t('Default'),
      'background' => t('Background'),
      'gradient-overlay' => t('Gradient Overlay')
    ),
    '#default_value' => isset($attrs['options']) ? $attrs['options'] : 'default',
    '#attributes' => array('class' => array('form-control', 'video')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#states' => array(
      'visible' => array(
        '.video' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );
  $form['video_title'] = array(
    '#title' => t('Video Title'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['video_title']) ? $attrs['video_title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.video' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );
  return $form;
}

function hcode_shortcodes_shortcode_feature($attrs, $text) {
  global $feature_count;
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['type'] = isset($attrs['type']) ? $attrs['type'] : 'work';
  $attrs['text'] = isset($attrs['text']) ? $attrs['text'] : '';
  $attrs['text_color'] = isset($attrs['text_color']) ? $attrs['text_color'] : 'gray-text';
  $attrs['icon'] = isset($attrs['icon']) ? $attrs['icon'] : '';
  switch ($attrs['type']) {
    case 'work':
      $text = '<div class="work-process-details position-absolute display-block">
                <i class="' . $attrs['icon'] . ' medium-icon fast-yellow-text display-block"></i>
                <span class="text-small text-uppercase">' . $text . '</span>
              </div>';
      $feature_count++;
      $attrs['class'] .= ' work-process-sub position-relative overflow-hidden';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <div class="work-process-text">
                  <span class="work-process-number font-weight-100 display-block">' . (strlen($feature_count) == 1 ? '0' . $feature_count : $feature_count) . '</span>
                  <span class="text-uppercase letter-spacing-2 font-weight-600 black-text">' . $attrs['text'] . '</span>
                  <div class="separator-line-thick bg-mid-gray margin-three"></div>
                </div>' . $text . '
              </div>';
      break;
    case 'feature':
      $icon_size = isset($attrs['small_icon']) && $attrs['small_icon'] ? ' small-icon' : ' medium-icon';
      $attrs['class'] .= ' features-box-style1';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <i class="' . $attrs['icon'] . $icon_size . ' gray-text"></i>
                <h5 class="margin-ten no-margin-top xs-margin-bottom-five">' . $attrs['text'] . '</h5>' . $text . '
              </div>';
      break;
    case 'feature-separator':
      $attrs['class'] .= ' features-box-style2';
      $icon = $attrs['icon'] != '' ? '<i class="' . $attrs['icon'] . ' medium-icon gray-text"></i>' : '';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                ' . $icon . '
                <h5 class="margin-ten no-margin-top xs-margin-bottom-five">' . $attrs['text'] . '</h5>
                <div class="separator-line bg-yellow no-margin-lr margin-ten"></div>' . $text . '                
              </div>';
      break;
    case 'fearure-left':
      $attrs['class'] .= ' features-section';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
            <div class="col-md-3 col-sm-2 col-xs-2 no-padding">
              <i class="' . $attrs['icon'] . ' medium-icon"></i>
            </div>
            <div class="col-md-9 col-sm-9 col-xs-9 no-padding text-left f-right">  
              <h5 class="margin-ten no-margin-top xs-margin-bottom-five">' . $attrs['text'] . '</h5>
              <div class="separator-line bg-yellow no-margin-lr margin-ten"></div>' . $text . '
            </div>
          </div>';
      break;
    case 'bb':
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <i class="' . $attrs['icon'] . ' medium-icon white-text xs-no-margin"></i>
                <h5 class="white-text margin-ten no-margin-bottom xs-margin-top-four">' . $attrs['text'] . '</h5>
                <div class="approach-details">
                  ' . $text . '
                </div>                
              </div>';
      break;
    case 'features-2':
      $attrs['class'] .= ' features-2';
      $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
      $file_name = $file ? file_create_url($file->uri) : '';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <div class="key-person">
                  <div class="key-person-img"><img src="' . $file_name . '" alt = ""></div>
                  <div class="key-person-details bg-gray no-border no-padding-bottom">
                    <h5>' . $attrs['text'] . '</h5>
                    <div class="separator-line bg-black"></div>' . $text . '
                  </div>
                </div>
              </div>';
      break;
    case 'key-person':
      $attrs['class'] .= ' key-person';
      $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : FALSE;
      $file_name = $file ? file_create_url($file->uri) : '';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <div class="key-person-img"><img src="' . $file_name . '" alt = "' . (isset($attrs['name']) ? $attrs['name'] : '') . '"></div>
                <div class="key-person-details">
                  <span class="person-name black-text">' . (isset($attrs['name']) ? $attrs['name'] : '') . '</span>
                  <span class="person-post">' . (isset($attrs['post']) ? $attrs['post'] : '') . '</span>
                  <div class="separator-line bg-yellow"></div>
                  <div class="person-social">
                    <a href="' . $attrs['facebook'] . '">
                      <i class="fa fa-facebook"></i>
                    </a>
                    <a href="' . $attrs['twitter'] . '">
                      <i class="fa fa-twitter"></i>
                    </a>
                    <a href="' . $attrs['google'] . '">
                      <i class="fa fa-google-plus"></i>
                    </a>
                  </div>' . $text . '
                </div>
              </div>';
  }
  return $text;
}

function hcode_shortcodes_shortcode_feature_settings($attrs, $text) {
  $form['text'] = array(
    '#title' => t('Text'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['text']) ? $attrs['text'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
    '#states' => array(
      'invisible' => array(
        '.feature-type' => array(
          array('value' => 'key-person'),
        ),
      ),
    ),
  );
  $form['icon'] = array(
    '#title' => t('Icon'),
    '#type' => 'textfield',
    //'#autocomplete_path' => 'admin/ajax/stig_shortcodes/icons_autocomplete',
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#states' => array(
      'invisible' => array(
        '.feature-type' => array(
          array('value' => 'features-2'),
          array('value' => 'key-person'),
        ),
      ),
    ),
  );
  $type = array(
    'work' => t('Work Proccess'),
    'feature' => t('Feature'),
    'feature-separator' => t('Feature Separator'),
    'fearure-left' => t('Feature Left Icon'),
    'bb' => t('Black Background'),
    'features-2' => t('Key Person #1'),
    'key-person' => t('Key Person #2')
  );  
  $form['type'] = array(
    '#title' => t('Type'),
    '#type' => 'select',
    '#options' => $type,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : 'work',
    '#attributes' => array('class' => array('form-control','feature-type')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
  );
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Image or Video'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.feature-type' => array(
          array('value' => 'features-2'),
          array('value' => 'key-person'),
        ),
      ),
    ),
  );
  $form['small_icon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Small Icon'),
    '#default_value' => isset($attrs['small_icon']) ? $attrs['small_icon'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.feature-type' => array(
          'value' => 'feature',
        ),
      ),
    ),
  );
  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['name']) ? $attrs['name'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
    '#states' => array(
      'visible' => array(
        '.feature-type' => array(
          array('value' => 'key-person'),
        ),
      ),
    ),
  );
  $form['post'] = array(
    '#title' => t('Post'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['post']) ? $attrs['post'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.feature-type' => array(
          array('value' => 'key-person'),
        ),
      ),
    ),
  );
  $form['facebook'] = array(
    '#title' => t('Facebook URL'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['facebook']) ? $attrs['facebook'] : '#',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
    '#states' => array(
      'visible' => array(
        '.feature-type' => array(
          array('value' => 'key-person'),
        ),
      ),
    ),
  );
  $form['twitter'] = array(
    '#title' => t('Twitter URL'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['twitter']) ? $attrs['twitter'] : '#',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#states' => array(
      'visible' => array(
        '.feature-type' => array(
          array('value' => 'key-person'),
        ),
      ),
    ),
  );
  $form['google'] = array(
    '#title' => t('Google+ URL'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['google']) ? $attrs['google'] : '#',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.feature-type' => array(
          array('value' => 'key-person'),
        ),
      ),
    ),
  );
  return $form;
}

function hcode_shortcodes_shortcode_accordions($attrs, $text) {
  global $accordion_inc, $accordions;
  $accordion_inc = 0;
  $attrs['accord_style'] = isset($attrs['accord_style']) ? $attrs['accord_style'] : 'accordion-style1';
  $attrs['class'] = 'panel-group ' . $attrs['accord_style'] . ' ' . (isset($attrs['class']) ? $attrs['class'] : '') . ' ' . (isset($attrs['no_border']) ? 'no-border' : '');
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs)  . ' id = "accordions-' . $accordions++ .'">' . $text . '</div>';
  return $text;
}

function hcode_shortcodes_shortcode_accordions_settings($attrs, $text) {
  $style = array(
    'accordion-style1' => t('White'),
    'accordion-style2' => t('Black'),
    'accordion-style3' => t('Big Grey'),
    'toggles' => t('Toggles White'),
    'toggles-style2' => t('Toggles Black'),
    'toggles-style3' => t('Toggles Big Grey'),
  );
  $form['accord_style'] = array(
    '#type' => 'select',
    '#tytle' => t('Style'),
    '#options' => $style,
    '#default_value' => isset($attrs['accord_style']) ? $attrs['accord_style'] : 'accordion-style1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $form['no_border'] = array(
    '#type' => 'checkbox',
    '#title' => t('No Border'),
    '#default_value' => isset($attrs['no_border']) ? $attrs['no_border'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  return $form;
}  

function hcode_shortcodes_shortcode_accordion($attrs, $text) {
  global $accordion_count, $accordions, $accordion_inc;
  $accordion_count++;
  $accordion_inc++;
  $accordions = isset($accordions) ? $accordions : 1;
  $attrs['active'] = isset($attrs['active']) ? $attrs['active'] : FALSE;
  $attrs['show_num'] = isset($attrs['show_num']) ? $attrs['show_num'] : FALSE;
  $attrs['pull_btn'] = isset ($attrs['pull_btn']) ? $attrs['pull_btn'] : '';
  if ($attrs['pull_btn'] == '') {
    $pull_btn = $attrs['active'] ? 'fa fa-minus' : 'fa fa-plus';
  }
  else{
    $pull_btn = $attrs['active'] ? 'fa fa-angle-up' : 'fa fa-angle-down';
  }
  $attrs['class'] = 'panel panel-default ' . (isset($attrs['class']) ? $attrs['class'] : '');
  if ($attrs['show_num']){
    if (strlen($accordion_inc) == 1) {
      $accordion_num = '<strong class="number">0' . $accordion_inc . '</strong>';
    }
    else {
      $accordion_num = '<strong class="number">' . $accordion_inc . '</strong>';
    }
  }
  else{
    $accordion_num = '';
  }
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>
    <div class="panel-heading' . ($attrs['active'] ?  ' active-accordion' : '') . '">
      <a data-toggle="collapse" class = "' . ($attrs['active'] ? '' : 'collapsed') . '" data-parent="#accordions-' . $accordions .'" href="#accordion-' .  $accordion_count . '">
        <h4 class="panel-title">
          ' . $accordion_num . $attrs['title'] . '
          <span class="pull-right">
            <i class="' . $pull_btn . '"></i>
          </span>
        </h4>
      </a>
    </div>
    <div id="accordion-' . $accordion_count . '" class="panel-collapse collapse' . (isset($attrs['active']) && $attrs['active'] ? ' in' : '') . '">
      <div class="panel-body">
        ' . $text . '
      </div>
    </div>
  </div>';
  return $text;
}

function hcode_shortcodes_shortcode_accordion_settings($attrs, $text) {
  $form['title'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $pull_btn = array('' => t('Plus/Minus'), 'angle' => t('Angle Up/Down'));
  $form['pull_btn'] = array(
    '#type' => 'select',
    '#title' => t('Pull Button'),
    '#options' => $pull_btn,
    '#default_value' => isset($attrs['pull_btn']) ? $attrs['pull_btn'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  $form['active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#default_value' => isset($attrs['active']) ? $attrs['active'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['show_num'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Number'),
    '#default_value' => isset($attrs['show_num']) ? $attrs['show_num'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hcode_shortcodes_shortcode_button ($attrs, $text) {
  $btn_not_rounded = array(
    'highlight-button-black-border',
    'button-reveal',
    'button-reveal-black',
    'social-icon',
    'social-icon social-icon-large'
  );
  $btn_icon = array(
    'highlight-button',
    'highlight-button-dark',
    'btn-small-white-background',
    'button-reveal',
    'button-reveal button-reveal-black'
  );
  $span_title = array(
    'button-reveal',
    'button-reveal button-reveal-black'
  );
  $no_title = array(
    'social-icon',
    'social-icon social-icon-large'
  );
  $attrs['btn_type'] = isset($attrs['btn_type']) ? $attrs['btn_type'] : '';
  $attrs['description'] = isset($attrs['description']) && $attrs['btn_type'] == 'button-desc' ? '<span>' . $attrs['description'] . '</span>' : '';
  $attrs['btn_size'] = isset($attrs['btn_size']) ? $attrs['btn_size'] : 'btn-large';
  $attrs['bootstrap_btn'] = isset($attrs['bootstrap_btn']) ? $attrs['bootstrap_btn'] : 'btn-primary';
  $icon = isset($attrs['icon']) && in_array($attrs['btn_type'], $btn_icon) ? '<i class="' . $attrs['icon'] . '"></i>' : '';
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['class'] .= isset($attrs['rounded']) && $attrs['rounded'] && !in_array($attrs['btn_type'], $btn_not_rounded) ? ' btn-round' : '';
  $attrs['title'] = isset($attrs['title']) ? $attrs['title'] : '';
  //-----------\/----\/---- botstrap & bootstrap-3d buttons ----------------------
  if ($attrs['btn_type'] == '' || $attrs['btn_type'] == 'button-3d') {
    $attrs['btn_size'] = 'btn-small ';
    $bootstrap_btn = 'btn-round ' . $attrs['bootstrap_btn'];
  }
  else{
    $bootstrap_btn = '';
  }
  //------------/\----/\----------------------------------------------------------
  if (in_array($attrs['btn_type'], $span_title)) {
    $title = '<span>' . $attrs['title'] . '</span>';
    $attrs['btn_size'] = '';
  }
  else {
    $title = $attrs['title'];
  }
  //---------------------------- socials buttons -----------------------------
  if (in_array($attrs['btn_type'], $no_title)) {
    $title = '<i class="btn-round ' . (isset($attrs['social_btn']) ? $attrs['social_btn'] : 'fa fa-facebook') . '"></i>';
    $attrs['btn_size'] = '';
  }
  //--------------------------------------------------------------------------
  //--------------------- description button -----------------------------------------
  if ($attrs['btn_type'] == 'button-desc') {
    $attrs['class'] .= ' btn-success btn-round button-3d ';
    $attrs['btn_size'] = 'btn-large';
  }
  //----------------------------------------------------------------------------------
  $attrs['class'] .= ' btn button ' . $attrs['btn_size'] . $bootstrap_btn . ' ' . $attrs['btn_type'];
  $text = '<a ' . _hcode_shortcodes_shortcode_attributes($attrs) . ' href="' . (isset($attrs['link']) ? $attrs['link'] : '#'). '">' . $icon . $title . $attrs['description'] . '</a>';
  return $text;
}

function hcode_shortcodes_shortcode_button_settings ($attrs, $text) {
  $btn_type = array(
    'highlight-button' => t('Highlight'),
    'highlight-button-dark' => t('Highlight Dark'),
    'btn-small-white-background' => t('White Background'),
    'highlight-button-black-border' => t('Highlight Bold'),
    'btn-small-white' => t('White on Black'),
    'btn-small-white-dark' => t('Dark on White'),
    'btn-small-black-border-light' => t('Highlight Thin'),
    'btn-very-small-white' => t('White on Black Thin'),
    'button-reveal' => t('Reveal'),
    'button-reveal button-reveal-black' => t('Reveal Black'),
    '' => t('Bootstrap'),
    'social-icon' => t('Social Icon'),
    'social-icon social-icon-large' => t('Social Large Icon'),
    'button-desc' => t('Description'),
    'button-3d' => t('Bootstrap 3D')
  );
  $form['btn_type'] = array(
    '#type' => 'select',
    '#title' => t('Button Type'),
    '#options' => $btn_type,
    '#default_value' => isset($attrs['btn_type']) ? $attrs['btn_type'] : 'highlight-button',
    '#attributes' => array('class' => array('form-control', 'btn-type-select')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $btn_size = array(
    'btn-large' => t('Large'),
    'btn-medium' => t('Medium'),
    'btn-small' => t('Small'),
    'btn-very-small' => t('Very Small'),
  );
  $form['btn_size'] = array(
    '#type' => 'select',
    '#title' => t('Button Type'),
    '#options' => $btn_size,
    '#default_value' => isset($attrs['btn_size']) ? $attrs['btn_size'] : 'btn-large',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#states' => array(
      'invisible' => array(
        '.btn-type-select' => array(
          array('value' => 'button-reveal'),
          array('value' => 'button-reveal button-reveal-black'),
          array('value' => ''),
          array('value' => 'social-icon'),
          array('value' => 'social-icon social-icon-large'),
          array('value' => 'button-desc'),
          array('value' => 'button-3d'),
        ),
      ),  
    ),
  );
  $form['rounded'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rounded'),
    '#default_value' => isset($attrs['rounded']) ? $attrs['rounded'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'invisible' => array(
        '.btn-type-select' => array(
          array('value' => 'highlight-button-black-border'),
          array('value' => 'button-reveal'),
          array('value' => 'button-reveal button-reveal-black'),
          array('value' => ''),
          array('value' => 'social-icon'),
          array('value' => 'social-icon social-icon-large'),
          array('value' => 'button-desc'),
          array('value' => 'button-3d'),
        ),
      ),  
    ),
  );
  $form ['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
    '#states' => array(
      'invisible' => array(
        '.btn-type-select' => array(
          array('value' => 'social-icon'),
          array('value' => 'social-icon social-icon-large'),
        ),
      ),  
    ),
  );
  $form ['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => isset($attrs['description']) ? $attrs['description'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.btn-type-select' => array(
          'value' => 'button-desc'
        )
      )
    )
  );
  $form ['link'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#default_value' => isset($attrs['link']) ? $attrs['link'] : '#',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-12">',
    '#suffix' => '</div></div>'
  );
  $form['icon'] = array(
    '#title' => t('FontAwesome Icon'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'admin/ajax/nd_visualshortcodes/icons_autocomplete/font_awesome',
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
    '#states' => array(
      'visible' => array(
        '.btn-type-select' => array(
          array('value' => 'highlight-button'),
          array('value' => 'highlight-button-dark'),
          array('value' => 'btn-small-white-background'),
          array('value' => 'button-reveal'),
          array('value' => 'button-reveal button-reveal-black'),
        )
      )
    )
  );
  $bootstrap_btn = array(
    'btn-primary' => t('Primary'),
    'btn-success' => t('Success'),
    'btn-info' => t('Info'),
    'btn-warning' => t('Warning'),
    'btn-danger' => t('Danger')
  );
  $form['bootstrap_btn'] = array(
    '#type' => 'select',
    '#title' => t('Bootstrap Type'),
    '#options' => $bootstrap_btn,
    '#default_value' => isset($attrs['bootstrap_btn']) ? $attrs['bootstrap_btn'] : 'btn-primary',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#states' => array(
      'visible' => array(
        '.btn-type-select' => array(
          array('value' => ''),
          array('value' => 'button-3d'),
        )
      )
    )
  );
  $social_icon = array(
    'fa fa-facebook' => t('Facebook'),
    'fa fa-twitter' => t('Twitter'),
    'fa fa-google-plus' => t('Google+'),
    'fa fa-tumblr' => t('Tumblr'),
    'fa fa-rss' => t('RSS'),
    'fa fa-soundcloud' => t('Soundcloud'),
    'fa fa-instagram' => t('Instagram'),
    'fa fa-github-alt' => t('GitHub'),
    'fa fa-youtube' => t('Youtube'),
    'fa fa-flickr' => t('Flickr'),
    'fa fa-linkedin' => t('LinkedIn'),
    'fa fa-behance' => t('Behance'),
    'fa fa-dribbble' => t('Dribbble'),
    'fa fa-vimeo-square' => t('Vimeo')
  );
  $form['social_btn'] = array(
    '#type' => 'select',
    '#title' => t('Socials'),
    '#options' => $social_icon,
    '#default_value' => isset($attrs['social_btn']) ? $attrs['social_btn'] : 'fa fa-facebook',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.btn-type-select' => array(
          array('value' => 'social-icon'),
          array('value' => 'social-icon social-icon-large'),
        )
      )
    )
  );
  return $form;
}

function hcode_shortcodes_shortcode_progress_box ($attrs, $text) {
  global $bar_count, $progress_data;
  $attrs['class'] = 'progress-bar-main ' . (isset($attrs['class']) ? $attrs['class'] : '');
  $box_style = isset ($attrs['box_style']) ? $attrs['box_style'] : '';
  $output = '';
  $attrs['class'] .= ' ' . $box_style;
  foreach ($progress_data as $bar_data){  
    switch ($box_style) {
      case '':
        $data1 = '';
        $data2 = '<div class="progress-name">
                  <strong>' . $bar_data['title'] . '</strong>
                          ' . $bar_data['description'] . '
                  </div>';
        break;
      case 'progress-bar-style2':
        switch ($bar_data['color']) {
          case '':
            $data1 = '<span>' . $bar_data['value'] . '%</span>';
            $data2 = '<div class="progress-name">
                        <strong>' . $bar_data['title'] . '</strong>
                        ' . $bar_data['description'] . '
                      </div>';
            break;
          case 'progress-bar-success':
          case 'progress-bar-striped progress-bar-success':
            $data1 = '<span>' . $bar_data['value'] . '%</span>';
            $data2 = '<div class="progress-name">
                        <strong>Progress bar - Success</strong>
                        </div>';
            break;
          case 'progress-bar-warning':
          case 'progress-bar-striped progress-bar-warning':
            $data1 = '<span>' . $bar_data['value'] . '%</span>';
            $data2 = '<div class="progress-name">
                        <strong>Progress bar - Warning</strong>
                      </div>';
            break;
          case 'progress-bar-danger':
          case 'progress-bar-striped progress-bar-danger':
            $data1 = '<span>' . $bar_data['value'] . '%</span>';
            $data2 = '<div class="progress-name">
                        <strong>Progress bar - Danger</strong>
                      </div>';
            break;
        }
        break;
      case 'progress-bar-style3':
        $data1 = $bar_data['title'] . ' - ' .$bar_data['value'] . '%';
        $data2 = '';
        break;
    }
    $output .= '<div class="progress-bar-sub">
                <div class="progress">
                  <div class="progress-bar ' . $bar_data['color'] . '" style="width: ' . $bar_data['value'] . '%;" aria-valuemax="100" aria-valuemin="0" aria-valuenow="' . $bar_data['value'] . '" role="progressbar">
                    ' . $data1 . '
                  </div>
                </div>' . $data2 . '                
              </div>';
  }
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) .'>' . $output . '</div>';
  $bar_count = 0;
  return $text;
}

function hcode_shortcodes_shortcode_progress_box_settings ($attrs, $text) {
  $form['box_style'] = array(
    '#type' => 'select',
    '#title' => t('Progress Bar Box Style'),
    '#options' => array(
      '' => t('Thin Line'),
      'progress-bar-style2' => t('Medium Line'),
      'progress-bar-style3' => t('Bold Line')
    ),
    '#default_value' => isset($attrs['box_style']) ? $attrs['box_style'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hcode_shortcodes_shortcode_progress ($attrs, $text){
  global $bar_count, $progress_data;
  $bar_count++;
  $attrs['color'] = isset($attrs['color']) ? $attrs['color'] : '';
  $attrs['title'] = isset($attrs['title']) ? $attrs['title'] : '';
  $attrs['description'] = isset($attrs['description']) ? $attrs['description'] : '';
  $attrs['value'] = isset($attrs['value']) ? $attrs['value'] : '';
  $progress_data[$bar_count] = array(
    'color' => $attrs['color'],
    'title' => $attrs['title'],
    'description' => $attrs['description'],
    'value' => $attrs['value'],
  );
  
  return $text;
}

function hcode_shortcodes_shortcode_progress_settings ($attrs, $text){
  $form['color'] = array(
    '#title' => t('Bar Color'),
    '#type' => 'select',
    '#options' => array(
      '' => t('Default'),
      'progress-bar-success' => t('Success'),
      'progress-bar-warning' => t('Warning'),
      'progress-bar-danger' => t('Danger'),
      'progress-bar-striped progress-bar-success'=> t('Striped Success'),
      'progress-bar-striped progress-bar-warning' => t('Striped Warning'),
      'progress-bar-striped progress-bar-danger' => t('Striped Danger')
    ),
    '#default_value' => isset($attrs['color']) ? $attrs['color'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $form['description'] = array(
    '#title' => t('Description'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['description']) ? $attrs['description'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $form['value'] = array(
    '#title' => t('Value'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['value']) ? $attrs['value'] : '0',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hcode_shortcodes_shortcode_pricing_box ($attrs, $text) {
  $attrs['best_price'] = isset($attrs['best_price']) ? $attrs['best_price'] : FALSE;
  $attrs['class'] = 'pricing-box ' . ($attrs['best_price'] ? 'best-price ' : '') . (isset($attrs['class']) ? $attrs['class'] : '');
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
            <div class="pricing-title">
              <h3>' . (isset($attrs['title']) ? $attrs['title'] : '') . '</h3>
            </div>
            <div class="pricing-price">
              <span class="price-unit">€</span>
              ' . (isset($attrs['price']) ? $attrs['price'] : '0') . '
              <span class="price-tenure">/mo</span>
            </div>
            <div class="pricing-features">
              <ul>' . $text . '
              </ul>
            </div>
            <div class="pricing-action">
              <a class="' . ($attrs['best_price'] ? 'btn-small-white-background' : 'highlight-button') . ' btn btn-small button no-margin" 
              href="' . (isset($attrs['link']) ? $attrs['link'] : '#') . '">' . (isset($attrs['action_text']) ? $attrs['action_text'] : '') . '</a>
            </div>
          </div>';
  return $text;
}

function hcode_shortcodes_shortcode_pricing_box_settings ($attrs, $text) {
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $form['price'] = array(
    '#title' => t('Price'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['price']) ? $attrs['price'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
  );
  $form['best_price'] = array(
    '#title' => t('Best Price'),
    '#type' => 'checkbox', 
    '#default_value' => isset($attrs['best_price']) ? $attrs['best_price'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
  );
  $form['link'] = array(
    '#title' => t('Action URL'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['link']) ? $attrs['link'] : '#',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-8">',
  );
  $form['action_text'] = array(
    '#title' => t('Action Text'),
    '#type' => 'textfield', 
    '#default_value' => isset($attrs['action_text']) ? $attrs['action_text'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hcode_shortcodes_shortcode_pricing_item ($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['type'] = isset($attrs['type']) ? $attrs['type'] : '';
  $attrs['strong'] = isset($attrs['strong']) ? $attrs['strong'] : '';
  $attrs['text'] = isset($attrs['text']) ? $attrs['text'] : '';
  $attrs['icon'] = isset($attrs['icon']) ? $attrs['icon'] : FALSE;
  $attrs['stars'] = isset($attrs['stars']) ? $attrs['stars'] : 0;
  if ($attrs['type'] == '') {
    $text = $attrs['strong'] != '' ? '<strong>' . $attrs['strong'] . '</strong>' : '';
    $text = '<li ' . _hcode_shortcodes_shortcode_attributes($attrs) .'>' . ($attrs['icon'] ? '<i class="icon-code"></i>' : '') . $text . ' ' . $attrs['text'] . '</li>';  
  }
  else {
    $text = '';
    for ($i = 1; $i <= $attrs['stars']; $i++){
      $text .= '<i class="fa fa-star"></i>';
    }
    $text = '<li ' . _hcode_shortcodes_shortcode_attributes($attrs) .'">' . $text . '</li>';
  }
  return $text;
}

function hcode_shortcodes_shortcode_pricing_item_settings ($attrs, $text) {
  $form['type'] = array(
    '#title' => t('Pricing Item Type'),
    '#type' => 'select',
    '#options' => array(
      '' => t('Text'),
      'stars' => t('Stars'),
    ),
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '',
    '#attributes' => array('class' => array('form-control', 'item-type')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['strong'] = array(
    '#title' => t('Strong text'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['strong']) ? $attrs['strong'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#states' => array(
      'visible' => array(
        '.item-type' => array(
          'value' => ''
        ),
      ),  
    ),
  );
  $form['text'] = array(
    '#title' => t('Text'),
    '#type' => 'textfield', 
    '#default_value' => isset($attrs['text']) ? $attrs['text'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.item-type' => array(
          'value' => ''
        ),
      ),  
    ),
  );
  $form['icon'] = array(
    '#title' => t('Icon'),
    '#type' => 'checkbox', 
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
    '#states' => array(
      'visible' => array(
        '.item-type' => array(
          'value' => ''
        ),
      ),  
    ),
  );
  $form['stars'] = array(
    '#title' => t('Stars'),
    '#type' => 'select', 
    '#options' => array(
      0 => '0',
      1 => '1',
      2 => '2',
      3 => '3',
      4 => '4',
      5 => '5'
    ),
    '#default_value' => isset($attrs['stars']) ? $attrs['stars'] : '0',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'invisible' => array(
        '.item-type' => array(
          'value' => ''
        ),
      ),  
    ),
  );
  return $form;
}

function hcode_shortcodes_shortcode_hr($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['type'] = isset($attrs['type']) ? $attrs['type'] : 'wide';
  if ($attrs['type'] == 'wide') {
    $attrs['class'] = 'wide-separator-line no-margin-lr ' . $attrs['class'];
    $hr = '<hr class="mt-0 mb-0">';
  }
  else {
    $attrs['class'] = 'separator-line ' . $attrs['type'] . ' ' . $attrs['class'];
    $hr = '';
  }
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $hr . '</div>';
  return $text;
}

function hcode_shortcodes_shortcode_hr_settings($attrs, $text) {
  $form['type'] = array(
    '#title' => t('Type'),
    '#type' => 'select',
    '#options' => array(
      'wide' => t('Wide Thin Line'),
      'bg-yellow' => t('Yellow Short Separator'),
      'bg-black' => t('Black Short Separator')
    ),
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : 'wide',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  return $form;
}

function hcode_shortcodes_shortcode_icon($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['link'] = isset($attrs['link']) && $attrs['link'] ? $attrs['link'] : '#';
  $attrs['icon'] = isset($attrs['icon']) ? $attrs['icon'] : '';
  $attrs['icon_style'] = isset($attrs['icon_style']) ? $attrs['icon_style'] : 'default';
  switch ($attrs['icon_style']) {
    case 'none' :
      $attrs['class'] .= $attrs['icon'];
      break;
    case 'default' :
      $attrs['icon_size'] = isset($attrs['icon_size']) ? $attrs['icon_size'] : '';
      $attrs['class'] .= ' ' . $attrs['icon_size'] . ' ' . $attrs['icon'];
      break;
    case 'box' :
      $attrs['boxed_size'] = isset($attrs['boxed_size']) ? $attrs['boxed_size'] : 'i-large-box';
      $attrs['class'] .= ' ' . $attrs['boxed_size'] . ' ' .  $attrs['icon'];
      $attrs['class'] .= ' ' . (isset($attrs['type']) ? $attrs['type'] : 'i-plain') . ' ' . (isset($attrs['circled']) && $attrs['circled'] ? 'i-circled' : '');
      $attrs['class'] .= (isset($attrs['color']) && $attrs['type'] == 'i-rounded i-3d-border' ? ' ' . $attrs['color'] : '');
  }
  
  /*if(isset($attrs['icon_style']) && $attrs['icon_style'] == 'default'){
    $attrs['icon_size'] = isset($attrs['icon_size']) ? $attrs['icon_size'] : '';
    $attrs['class'] .= ' ' . $attrs['icon_size'] . ' ' . (isset($attrs['icon']) ? $attrs['icon'] : '');
  }
  else{
    $attrs['boxed_size'] = isset($attrs['boxed_size']) ? $attrs['boxed_size'] : 'i-large-box';
    $attrs['class'] .= ' ' . $attrs['boxed_size'] . ' ' . (isset($attrs['icon']) ? $attrs['icon'] : '');
    $attrs['class'] .= ' ' . (isset($attrs['type']) ? $attrs['type'] : 'i-plain') . ' ' . (isset($attrs['circled']) && $attrs['circled'] ? 'i-circled' : '');
    $attrs['class'] .= (isset($attrs['color']) && $attrs['type'] == 'i-rounded i-3d-border' ? ' ' . $attrs['color'] : '');
  }*/
  $text = '<i ' . _hcode_shortcodes_shortcode_attributes($attrs) . '></i>';
  if ($attrs['link'] != '#') {
    if (strpos($attrs['link'], 'vimeo') !== FALSE) {
      $text = '<a class="popup-vimeo" href="' . $attrs['link'] . '">' . $text . '</a>';
    }
    else {
      $text = '<a href="' . $attrs['link'] . '">' . $text . '</a>';
    }
  }
  return $text;
}

function hcode_shortcodes_shortcode_icon_settings($attrs, $text) {
  $form['icon'] = array(
    '#title' => t('Icon'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'admin/ajax/hcode_shortcodes/icons_autocomplete',
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['icon_style'] = array(
    '#type' => 'select',
    '#title' => t('Icon Style'),
    '#options' => array(
      'none' => t('None'),
      'default' => t('Default'),
      'box' => t('Boxed Icon')
    ),
    '#default_value' => isset($attrs['icon_style']) ? $attrs['icon_style'] : 'default',
    '#attributes' => array('class' => array('form-control' , 'icon-style-select')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $options = array(
    'i-plain' => t('Default'),
    'i-rounded i-bordered' => t('Rounded Bordered'),
    'i-rounded' => t('Rounded'),
    'i-bordered i-light' => t('Bordered Light'),
    'i-ronded i-bordered i-light' => t('Rounded Bordered Light'),
    'i-rounded i-3d' => t('Rounded 3D'),
    'i-rounded i-3d-border' => t('Rounded 3D Color'),
  );
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $options,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : 'i-plain',
    '#attributes' => array('class' => array('form-control', 'icon-type-select')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.icon-style-select' => array(
          'value' => 'box',
        )
      )
    )
  );
  $form['icon_size'] = array(
    '#type' => 'select',
    '#title' => t('Icon Size'),
    '#options' => array(
      '' => t('None'),
      'extra-large-icon' => t('Extra Large'),
      'large-icon' => t('Large'),
      'medium-icon' => t('Medium'),
      'small-icon' => t('Small'),
      'extra-small-icon' => t('Extra Small')
    ),
    '#default_value' => isset($attrs['icon_size']) ? $attrs['icon_size'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
    '#states' => array(
      'invisible' => array(
        '.icon-style-select' => array(
          array('value' => 'box'),
          array('value' => 'none'),
        )
      )
    )
  );
  $form['boxed_size'] = array(
    '#type' => 'select',
    '#title' => t('Boxed Icon Size'),
    '#options' => array(
      'i-large-box' => t('Large Box'),
      'i-medium-box' => t('Medium Box'),
      'i-small-box' => t('Small Box'),
      'i-extra-small-box' => t('Extra Small Box')
    ),
    '#default_value' => isset($attrs['boxed_size']) ? $attrs['boxed_size'] : 'i-large-box',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#states' => array(
      'visible' => array(
        '.icon-style-select' => array(
          'value' => 'box',
        )
      )
    )
  );
  $form['color'] = array(
    '#type' => 'select',
    '#title' => t('Color'),
    '#options' => array(
      'bg-orange' => t('Orange'),
      'bg-yellow' => t('Yellow'),
      'bg-yellow-ochre' => t('Yellow Ochre'),
      'bg-green' => t('Green'),
      'bg-dark-blue' => t('Dark Blue'),
      'bg-dark-gray' => t('Dark Gray')
    ),
    '#default_value' => isset($attrs['color']) ? $attrs['color'] : 'i-plain',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.icon-type-select' => array(
          'value' => 'i-rounded i-3d-border',
        ),
        '.icon-style-select' => array(
          'value' => 'box',
        )
      )
    )
  );
  $form['circled'] = array(
    '#title' => t('Circled'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['circled']) ? $attrs['circled'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
    '#states' => array(
      'visible' => array(
        '.icon-style-select' => array(
          'value' => 'box',
        )
      )
    )
  );
  $form['link'] = array(
    '#title' => t('Link'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['link']) ? $attrs['link'] : '#',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-9">',
    '#suffix' => '</div></div>',
  );
  return $form;  
}

function hcode_shortcodes_shortcode_message($attrs, $text) {
  $attrs['message_type'] = isset($attrs['message_type']) ? $attrs['message_type'] : 'alert-success';
  $attrs['message_style'] = isset($attrs['message_style']) ? $attrs['message_style'] : 'simple';
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : ''; 
  switch ($attrs['message_style']){
    case 'text_line': //----------------------------- Style #1 -------------------------------------
      switch ($attrs['message_type']){
        case 'alert-info':
          $text ='<i class="icon-lightbulb"></i>
            <span>
              <strong>Heads up!</strong>' . $text . '
            </span>';
          break;
        case 'alert-success':
          $text = '<i class="icon-trophy"></i>
            <span>
              <strong>Well done!</strong>' . $text . '
            </span>'; 
          break;
        case 'alert-warning':
          $text = '<i class="icon-caution"></i>
            <span>
              <strong>Warning!</strong>' . $text . '
            </span>';
          break;
        case 'alert-danger':
          $text = '<i class="icon-sad"></i>
            <span>
              <strong>Oh snap!</strong>' . $text . '
            </span>';
      }
      $text = '<div class="alert ' . $attrs['message_type'] . '" role="alert">' . $text . '</div>';
      $attrs['class'] .= ' alert-style6';
      break;
    case 'rounded_box': //----------------------------- Style #2 -------------------------------------
      switch ($attrs['message_type']){
        case 'alert-info':
          $text = '<i class="fa fa-info-circle alert-info"></i>
          <strong>Heads up!</strong>' . $text . '
          <button class="close" type="button" data-dismiss="alert" aria-hidden="true">&times</button>';
          break;
        case 'alert-success':
          $text = '<i class="fa fa-thumbs-up alert-success"></i>
          <strong>Well done!</strong>' . $text . '
          <button class="close" type="button" data-dismiss="alert" aria-hidden="true">&times</button>';
          break;
        case 'alert-warning':
          $text = '<i class="fa fa-question-circle alert-warning"></i>
          <strong>Warning!</strong>' . $text . '
          <button class="close" type="button" data-dismiss="alert" aria-hidden="true">&times</button>';
          break;
        case 'alert-danger':
          $text = '<i class="fa fa-warning alert-danger"></i>
          <strong>Oh snap!</strong>' . $text . '
          <button class="close" type="button" data-dismiss="alert" aria-hidden="true">&times</button>';
      }
      $text = '<div class="alert ' . $attrs['message_type'] . ' fade in" role="alert">' . $text . '</div>';
      break;
    case 'rounded_box_3d': //----------------------------- Style #3 -------------------------------------
      switch ($attrs['message_type']){
        case 'alert-info':
          $text = '<i class="fa fa-info-circle alert-info"></i>
          <strong>Heads up!</strong>' . $text . '
          <button class="close" type="button" data-dismiss="alert" aria-hidden="true">&times</button>';
          break;
        case 'alert-success':
          $text = '<i class="fa fa-thumbs-up alert-success"></i>
          <strong>Well done!</strong>' . $text . '
          <button class="close" type="button" data-dismiss="alert" aria-hidden="true">&times</button>';
          break;
        case 'alert-warning':
          $text = '<i class="fa fa-question-circle alert-warning"></i>
          <strong>Warning!</strong>' . $text . '
          <button class="close" type="button" data-dismiss="alert" aria-hidden="true">&times</button>';
          break;
        case 'alert-danger':
          $text = '<i class="fa fa-warning alert-danger"></i>
          <strong>Oh snap!</strong>' . $text . '
          <button class="close" type="button" data-dismiss="alert" aria-hidden="true">&times</button>';
      }
      $text = '<div class="alert ' . $attrs['message_type'] . ' fade in" role="alert">' . $text . '</div>';
      $attrs['class'] .= ' alert-style5';
      break;
    case 'simple_rounded': //----------------------------- Style #4 -------------------------------------
      switch ($attrs['message_type']){
        case 'alert-info':
          $text = '<strong>Heads up!</strong>' . $text;
          break;
        case 'alert-success':
          $text = '<strong>Well done!</strong>' . $text;
          break;
        case 'alert-warning':
          $text = '<strong>Warning!</strong>' . $text;
          break;
        case 'alert-danger':
          $text = '<strong>Oh snap!</strong>' . $text;
      }
      $text = '<div class="alert ' . $attrs['message_type'] . '" role="alert">' . $text . '</div>';
      break;
    case 'simple_rounded_white': //----------------------------- Style #5 -------------------------------------
      switch ($attrs['message_type']){
        case 'alert-info':
          $text = '<strong>Heads up!</strong>' . $text;
          break;
        case 'alert-success':
          $text = '<strong>Well done!</strong>' . $text;
          break;
        case 'alert-warning':
          $text = '<strong>Warning!</strong>' . $text;
          break;
        case 'alert-danger':
          $text = '<strong>Oh snap!</strong>' . $text;
      }
      $text = '<div class="alert ' . $attrs['message_type'] . '" role="alert">' . $text . '</div>';
      $attrs['class'] .= ' alert-style2';
      break;
    case 'simple': //----------------------------- Style #6 -------------------------------------
      switch ($attrs['message_type']){
        case 'alert-info':
          $text = '<span>
            <strong>Heads up!</strong>' . $text . '
          </span>';
          break;
        case 'alert-success':
          $text = '<span>
            <strong>Well done!</strong>' . $text . '
          </span>';
          break;
        case 'alert-warning':
          $text = '<span>
            <strong>Warning!</strong>' . $text . '
          </span>';
          break;
        case 'alert-danger':
          $text = '<span>
            <strong>Oh snap!</strong>' . $text . '
          </span>';
      }
      $text = '<div class="alert ' . $attrs['message_type'] . '" role="alert">' . $text . '</div>';
      $attrs['class'] .= ' alert-style3';
      break;
    case 'simple_white': //----------------------------- Style #7 -------------------------------------
      switch ($attrs['message_type']){
        case 'alert-info':
          $text = '<strong>Heads up!</strong>' . $text;
          break;
        case 'alert-success':
          $text = '<strong>Well done!</strong>' . $text;
          break;
        case 'alert-warning':
          $text = '<strong>Warning!</strong>' . $text;
          break;
        case 'alert-danger':
          $text = '<strong>Oh snap!</strong>' . $text;
      }
      $text = '<div class="alert ' . $attrs['message_type'] . '" role="alert">' . $text . '</div>';
      $attrs['class'] .= ' alert-style4';
      break;
    case 'block_text': //----------------------------- Style #8 -------------------------------------
      switch ($attrs['message_type']){
        case 'alert-info':
          $text = '<h3 class="alert-info margin-two no-margin-top">Heads up!</h3>' . $text;
          break;
        case 'alert-success':
          $text = '<h3 class="alert-success margin-two no-margin-top">Well done!</h3>' . $text;
          break;
        case 'alert-warning':
          $text = '<h3 class="alert-warning margin-two no-margin-top">Warning!</h3>' . $text;
          break;
        case 'alert-danger':
          $text = '<h3 class="alert-danger margin-two no-margin-top">Oh snap!</h3>' . $text;
      }
      $text = '<div class="alert ' . $attrs['message_type'] . ' alert-block fade in" role="alert">
        <button class="close" data-dismiss="alert" type="button">&times</button>
        ' . $text . '</div>';
  }
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</div>';
  return $text;
}

function hcode_shortcodes_shortcode_message_settings($attrs, $text) {
  $message_type = array(
    'alert-info' => t('Info'),
    'alert-success' => t('Success'),
    'alert-warning' => t('Warning'),
    'alert-danger' => t('Danger')
  );
  $form['message_type'] = array(
    '#type' => 'select',
    '#title' => t('Message Type'),
    '#options' => $message_type,
    '#default_value' => isset($attrs['message_type']) ? $attrs['message_type'] : 'alert-success',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $message_style = array(
    'text_line' => t('Text&Line'),
    'rounded_box' => t('Rounded Box'),
    'rounded_box_3d' => t('Rounded Box 3D'),
    'simple_rounded' => t('Simple Rounded'),
    'simple_rounded_white' => t('Simple Rounded White'),
    'simple' => t('Simple'),
    'simple_white' => t('Simple White'),
    'block_text' => t('Block Text')
  );
  $form['message_style'] = array(
    '#type' => 'select',
    '#title' => t('Message Style'),
    '#options' => $message_style,
    '#default_value' => isset($attrs['message_style']) ? $attrs['message_style'] : 'simple',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
  );
  return $form;  
}

function hcode_shortcodes_shortcode_slider($attrs, $text) {
  global $slider_data, $slider_count;
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['type'] = isset($attrs['type']) ? $attrs['type'] : 'slider';
  $output = '';
  switch ($attrs['type']) {
    case 'myCarousel3' :
      for ($i = 1; $i <= $slider_count; $i++) {
        if ($slider_data[$i]['active']) {
          $slider_data[$i]['params'] = str_replace('+add_on+', 'active', $slider_data[$i]['params']);
        }
        else {
          $slider_data[$i]['params'] = str_replace('+add_on+', '', $slider_data[$i]['params']);
        }
        $slider_data[$i]['params'] = str_replace('+add_style+', '', $slider_data[$i]['params']);
        $output .= '<div ' . $slider_data[$i]['params'] . '>' . $slider_data[$i]['text'] . '</div>';
      }
      $attrs['class'] .= ' carousel slide carousel-slide';
      $text = '<div id="myCarousel3" ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>
                <div class="container">
                  <div class="carousel-inner">' . $output . '
                  </div>
                </div>
                <a class="left carousel-control" data-slide="prev" href="#myCarousel3">
                  <img alt="" src="' . base_path() . drupal_get_path('theme', 'hcode') . '/images/arrow-pre.png">
                </a>
                <a class="right carousel-control" data-slide="next" href="#myCarousel3">
                  <img alt="" src="' . base_path() . drupal_get_path('theme', 'hcode') . '/images/arrow-next.png">
                </a>
              </div>';
      $slider_count = 0;
      break;
    case 'myCarousel':
      $paginator = '';
      for ($i = 1; $i <= $slider_count; $i++) {
        if ($slider_data[$i]['active']) {
          $slider_data[$i]['params'] = str_replace('+add_on+', 'active full-screen', $slider_data[$i]['params']);
          $paginator .= '<li data-target="#myCarousel" data-slide-to="' . $i . '" class="active"></li>';
        }
        else {
          $slider_data[$i]['params'] = str_replace('+add_on+', 'full-screen', $slider_data[$i]['params']);
          $paginator .= '<li data-target="#myCarousel" data-slide-to="' . $i . '"></li>';
        }
        $slider_data[$i]['params'] = str_replace('+add_style+', '', $slider_data[$i]['params']);
        $output .= '<div ' . $slider_data[$i]['params'] . '>
                      <div class="fill" style="background-image:url(\'' . file_create_url($slider_data[$i]['image']) . '\');"></div>
                      <div class="container full-screen position-relative">
                          <div class="slider-typography">
                              <div class="slider-text-middle-main">
                                  <div class="slider-text-bottom slider-text-middle5 text-left animated fadeInUp">
                                      <span class="slider-number black-text border-color-black">' . $i . '</span>
                                      <span class="slider-title-big5 black-text">' . $slider_data[$i]['title'] . '</span>
                                      <span class="slider-subtitle5 black-text">' . $slider_data[$i]['subtitle'] . '</span><br>
                                      <div class="separator-line bg-black no-margin-lr no-margin-top sm-margin-bottom-ten"></div>
                                  </div>
                              </div>
                          </div>
                      </div>
                    </div>';
      }
      $attrs['class'] .= ' carousel slide carousel-slide';
      $text = '<section id="myCarousel" ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <ol class="carousel-indicators">' . $paginator . '</ol>
                  <div class="carousel-inner">' . $output . '
                  </div>
                  <a class="left carousel-control" data-slide="prev" href="#myCarousel">
                    <img alt="" src="' . base_path() . drupal_get_path('theme', 'hcode') . '/images/arrow-pre.png">
                  </a>
                  <a class="right carousel-control" data-slide="next" href="#myCarousel">
                    <img alt="" src="' . base_path() . drupal_get_path('theme', 'hcode') . '/images/arrow-next.png">
                  </a>
              </section>';
      $slider_count = 0;
      break;
    case 'slider' : 
      $attrs['slider_style'] = isset($attrs['slider_style']) ? $attrs['slider_style'] : 'dark';
      $no_prev_next = isset($attrs['no_prev_next']) && $attrs['no_prev_next'] ? 'dark-pagination-without-next-prev-arrow' : '';
      for ($i = 1; $i <= $slider_count; $i++) {
        $slider_data[$i]['params'] = str_replace('+add_on+', 'owl-bg-img', $slider_data[$i]['params']);
        $slider_data[$i]['params'] = str_replace('\'+add_style+\'', '"background-image:url(\'' . file_create_url($slider_data[$i]['image']) . '\');"', $slider_data[$i]['params']);
        switch ($attrs['slider_style']) {
          case 'dark' : 
            $title = $slider_data[$i]['title'] != '' ? '<span class="black-text">' . $slider_data[$i]['title'] . '</span>' : '';
            $subtitle_class = 'slider-subtitle2 black-text';
            $carousel_class = 'dark-pagination ' . $no_prev_next;
            $slider_class = 'slider-text-middle2 text-left';
            $output .= '<div ' . $slider_data[$i]['params'] . '>
                    <div class="container full-screen position-relative" >
                        <div class="slider-typography">
                            <div class="slider-text-middle-main">
                                <div class="slider-text-middle ' . $slider_class . ' animated fadeInUp">
                                    <div class="separator-line bg-black no-margin-lr sm-margin-bottom-ten"></div>
                                    <span class="' . $subtitle_class . '">' . $slider_data[$i]['subtitle'] . '</span>
                                    ' . $title . $slider_data[$i]['text'] . '
                                </div>
                            </div>
                        </div>
                    </div>
                  </div>';
            break;
          case 'white' :
            $title = $slider_data[$i]['title'] != '' ? '<span class="owl-title white-text center-col">' . $slider_data[$i]['title'] . '</span>' : '';
            $subtitle_class = 'owl-subtitle white-text';
            $carousel_class = 'owl-half-slider owl-small-slider ' . $no_prev_next;
            $slider_class = 'padding-left-right-px';
            $output .= '<div ' . $slider_data[$i]['params'] . '>
                    <div class="container position-relative" >
                        <div class="slider-typography">
                            <div class="slider-text-middle-main">
                                <div class="slider-text-middle ' . $slider_class . ' animated fadeInUp">
                                    <span class="' . $subtitle_class . '">' . $slider_data[$i]['subtitle'] . '</span>
                                    ' . $title . $slider_data[$i]['text'] . '
                                </div>
                            </div>
                        </div>
                    </div>
                  </div>';
            break;
          case 'dark-simple' :
            $carousel_class = 'dark-pagination ' . $no_prev_next;
            $output .= '<div ' . $slider_data[$i]['params'] . '>' . $slider_data[$i]['text'] . '
                        </div>';
            break;
          case 'square' :
          $carousel_class = 'light-pagination square-pagination ' . $no_prev_next;
            $output .= '<div class="item owl-bg-img" style="background-image:url(\'' . file_create_url($slider_data[$i]['image']) . '\');">
                          <div class="opacity-full bg-dark-gray"></div>
                            <div class="container full-screen position-relative">
                              <div class="slider-typography text-center">
                                <div class="slider-text-middle-main">
                                  <div class="slider-text-middle slider-text-middle6 padding-left-right-px wow fadeInUp">
                                    <span class="slider-title-big6 white-text text-uppercase font-weight-700 letter-spacing-3">' . $slider_data[$i]['title'] . '</span>
                                    <span class="white-text text-small text-uppercase letter-spacing-10 margin-three no-margin-bottom display-block xs-letter-spacing-6">' . $slider_data[$i]['subtitle'] . '</span>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>';
        }
        
      }
      $attrs['class'] .= ' no-padding slider';
      $text = '<section ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <div class="owl-demo owl-carousel owl-theme ' . $carousel_class . '">' . $output . '
                </div>
              </section>';
      $slider_count = 0;
      break;
    case 'owl': /*------------------------------ owl ----------------------------------------------------------------------------------------------*/
      for ($i = 1; $i <= $slider_count; $i++) {
        $slider_data[$i]['params'] = str_replace('+add_on+', '', $slider_data[$i]['params']);
        $slider_data[$i]['params'] = str_replace('\'+add_style+\'', '', $slider_data[$i]['params']);
        $output .= '<div ' . $slider_data[$i]['params'] . '><img src="' . file_create_url($slider_data[$i]['image']) . '" alt=""/></div>';
      }
      $attrs['class'] .= ' owl-carousel owl-theme dark-pagination';
      $text = '<div id="owl-demo" ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $output . '</div>';
      $slider_count = 0;
      break;
    case 'owl-carousel':
      for ($i = 1; $i <= $slider_count; $i++) {
        $slider_data[$i]['params'] = str_replace('+add_on+', '', $slider_data[$i]['params']);
        $slider_data[$i]['params'] = str_replace('\'+add_style+\'', '', $slider_data[$i]['params']);
        $output .= '<div ' . $slider_data[$i]['params'] . '><img src="' . file_create_url($slider_data[$i]['image']) . '" alt=""/></div>';
      }
      $attrs['class'] .= ' owl-carousel owl-theme dark-pagination';
      $text = '<section id="blog-slider-main" class="blog-slider mb-120 clearfix">
        <div id="blog-slider" ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $output . '</div>
      </div>';
      $slider_count = 0;
      break;
    case 'approach': /*------------------------ approach ------------------------------------------------------------------------------------------*/
      for ($i = 1; $i <= $slider_count; $i++) {
        $slider_data[$i]['params'] = str_replace('+add_on+', '', $slider_data[$i]['params']);
        $slider_data[$i]['params'] = str_replace('\'+add_style+\'', '', $slider_data[$i]['params']);
        $duration = $i <= 4 ? 'data-wow-duration="' . $i*3 . '00ms"' : '';
        $output .= '<div class="item margin-ten no-margin-top">
                      <div class="text-center margin-four ' . ($duration != '' ? 'wow fadeIn' : ''). ' sm-margin-bottom-ten" ' . $duration . '>' . $slider_data[$i]['text'] . '
                      </div>
                    </div>';
      }
      $attrs['class'] .= ' approach bg-black wow fadeIn';
      $text = '<section id="approach" ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <div class="container">
                  <div class="row">
                    <div id="approach-slider" class="owl-carousel owl-theme light-pagination bottom-pagination">' . $output . '
                    </div>
                  </div>
                </div>
              </section>';
      $slider_count = 0;
      break;
    case 'background': /*--------------------- background ----------------------------------------------------------------------------------------------*/
      for ($i = 1; $i <= $slider_count; $i++) {
        $slider_data[$i]['params'] = str_replace('+add_on+', '', $slider_data[$i]['params']);
        $slider_data[$i]['params'] = str_replace('\'+add_style+\'', '', $slider_data[$i]['params']);
        $output .= '<div class="background-slider-text">
                      <div class="container full-screen position-relative">
                        <div class="slider-typography">
                          <div class="slider-text-middle-main">
                            <div class="slider-text-bottom slider-text-middle5 text-left animated fadeInUp">
                              <span class="slider-number black-text border-color-black">' . $i . '</span>
                              <span class="slider-title-big5 black-text">' . $slider_data[$i]['title'] . '</span>
                              <span class="slider-subtitle5 black-text">' . $slider_data[$i]['subtitle'] . '</span><br>
                              <div class="separator-line bg-black no-margin-lr no-margin-top sm-margin-bottom-eleven xs-margin-bottom-thirteen"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>' . $slider_data[$i]['text'];
      }
      $attrs['class'] .= ' no-padding bg-white';
      $attrs['id'] = isset($attrs['id']) ? $attrs['id'] .' slider' : 'slider';
      $text = '<section ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $output . '</section>';
      break;
    case 'carousel': /*--------------------- carousel ----------------------------------------------------------------------------------------------*/
      for ($i = 1; $i <= $slider_count; $i++) {
        $slider_data[$i]['params'] = str_replace('+add_on+', '', $slider_data[$i]['params']);
        $slider_data[$i]['params'] = str_replace('\'+add_style+\'', '', $slider_data[$i]['params']);
        $output .= '<div class="item owl-bg-img full-screen" style="background-image:url(\'' . file_create_url($slider_data[$i]['image']) . '\');"></div>';
      }
      $attrs['class'] .= ' owl-carousel owl-theme';
      $attrs['id'] = isset($attrs['id']) ? $attrs['id'] .' owl-demo-background' : 'owl-demo-background';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $output . ' 
              </div>';
      $slider_count = 0;
      break;
    case 'typography': /*-------------------- typography ---------------------------------------------------------------------------------------------*/
      for ($i = 1; $i <= $slider_count; $i++) {
        $slider_data[$i]['params'] = str_replace('+add_on+', '', $slider_data[$i]['params']);
        $slider_data[$i]['params'] = str_replace('\'+add_style+\'', '', $slider_data[$i]['params']);
        $output .= '<b ' . (isset($slider_data[$i]['active']) && $slider_data[$i]['active'] ? 'class="is-visible"' : '') . '>' . $slider_data[$i]['title'] . '</b>';
      }
      $attrs['title'] = isset($attrs['title']) ? $attrs['title'] : '';
      $attrs['class'] .= ' slider-typography';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <div class="slider-text-middle-main">
                  <div class="slider-text-bottom slider-text-middle3">
                    <h1 class="cd-headline letters type xs-margin-bottom-thirtyfive">
                      <span class="rotation-highlight">' . $attrs['title'] . '</span><br>
                      <span class="cd-words-wrapper waiting">' . $output . '
                      </span>
                    </h1>
                  </div>
                </div>
              </div>';
      break;
    case 'typography_dd': /*-------------------- typography drop_down ---------------------------------------------------------------------------------------------*/
      for ($i = 1; $i <= $slider_count; $i++) {
        $slider_data[$i]['params'] = str_replace('+add_on+', '', $slider_data[$i]['params']);
        $slider_data[$i]['params'] = str_replace('\'+add_style+\'', '', $slider_data[$i]['params']);
        $output .= '<b ' . (isset($slider_data[$i]['active']) && $slider_data[$i]['active'] ? 'class="is-visible"' : '') . '>' . $slider_data[$i]['title'] . '</b>';
      }
      $attrs['class'] .= ' slider-typography';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <div class="slider-text-middle-main">
                  <div class="slider-text-middle slider-text-middle2">
                    <div class="separator-line bg-yellow xs-margin-bottom-five"></div>
                    <span class="cd-headline slide animation2 white-text text-uppercase">
                      <span class="cd-words-wrapper text-center">' . $output . '
                      </span>
                    </span>
                  </div>
                </div>
              </div>';
      break;
    case 'typography_1f': /*-------------------- typography one_frame---------------------------------------------------------------------------------------------*/
      for ($i = 1; $i <= $slider_count; $i++) {
        $slider_data[$i]['params'] = str_replace('+add_on+', '', $slider_data[$i]['params']);
        $slider_data[$i]['params'] = str_replace('\'+add_style+\'', '', $slider_data[$i]['params']);
        $output .= '<span class="slider-subtitle2 white-text">
                      ' . $slider_data[$i]['title'] . '
                    </span>' . (isset($slider_data[$i]['text']) ? $slider_data[$i]['text'] : '');
      }
      $attrs['class'] .= ' slider-typography';
      $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>
                <div class="slider-text-middle-main">
                  <div class="slider-text-middle slider-text-middle2 animated fadeInUp">
                    <div class="separator-line bg-white"></div>
                    ' . $output . '
                  </div>
                </div>
              </div>';
      break; 
  }
  return $text;
}

function hcode_shortcodes_shortcode_slider_settings($attrs, $text) {
  $slider_type = array(
    'myCarousel3' => t('Black'),
    'myCarousel' => t('Full Screen'),
    'slider' => t('OWL Title'),
    'owl' => t('OWL'),
    'owl-carousel' => t('OWL Carousel 3 Items'),
    'approach' => t('Approach'),
    'background' => t('Background'),
    'carousel' => t('Background Carousel'),
    'typography' => t('Typograhy'),
    'typography_dd' => t('Drop-Down Typography'),
    'typography_1f' => t('Typography (One Frame)'),
  );
  $form['type'] = array(
    '#title' => t('Slider Type'),
    '#type' => 'select',
    '#options' => $slider_type,
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : 'slider',
    '#attributes' => array('class' => array('form-control', 'slider-type')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['slider_style'] = array(
    '#title' => t('Style'),
    '#type' => 'select',
    '#options' => array(
      'dark' => t('Dark'),
      'dark-simple' => t('Dark Simple'),
      'square' => t('Square Pagination'),
      'white' => t('White'),
    ),
    '#default_value' => isset($attrs['slider_style']) ? $attrs['slider_style'] : 'dark',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#states' => array(
      'visible' => array(
        '.slider-type' => array(
          'value' => 'slider',
        )
      )
    )
  );
  $form['no_prev_next'] = array(
    '#title' => t('No Previous-Next Buttons'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['no_prev_next']) ? $attrs['no_prev_next'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
  );
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.slider-type' => array(
          'value' => 'typography',
        )
      )
    )
  );
  return $form;
}

function hcode_shortcodes_shortcode_slider_item($attrs, $text) {
  global $slider_data, $slider_count;
  if ($slider_count == 0) {
    $slider_data = array();
  }
  $slider_count++;
  $attrs['class'] = (isset($attrs['class']) ? $attrs['class'] : '') . 'item +add_on+';
  $attrs['style'] = '+add_style+';
  $attrs['active'] = isset($attrs['active']) ? $attrs['active'] : FALSE;
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $uri = isset($file->uri) ? $file->uri : '';
  $attrs['title'] = isset($attrs['title']) ? $attrs['title'] : '';
  $attrs['subtitle'] = isset($attrs['subtitle']) ? $attrs['subtitle'] : '';
  $slider_data[$slider_count] = array(
    'params' => _hcode_shortcodes_shortcode_attributes($attrs),
    'active' => $attrs['active'],
    'image' => $uri,
    'title' => $attrs['title'],
    'subtitle' => $attrs['subtitle'],
    'text' => $text
  );
  //return '<div ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '</div>';
}

function hcode_shortcodes_shortcode_slider_item_settings($attrs, $text) {
  $form['active'] = array(
    '#title' => t('Active'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['active']) ? $attrs['active'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Background Image'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '</div><div class = "col-sm-9">',
    '#suffix' => '</div></div>',
  );
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $form['subtitle'] = array(
    '#title' => t('Subtitle'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['subtitle']) ? $attrs['subtitle'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hcode_shortcodes_shortcode_quote($attrs, $text) {
  $attrs['type'] = isset($attrs['type']) ? $attrs['type'] : '';
  $attrs['class'] = (isset($attrs['class']) ? $attrs['class'] : '') . $attrs['type'];
  $attrs['author'] = isset($attrs['author']) ? $attrs['author'] : '';
  switch($attrs['type']) {
    case '':
      $output = '<blockquote ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '
          <footer>' . $attrs['author'] . '</footer>
        </blockquote>';
      break;
    case 'bg-black':
      $attrs['class'] .= ' blockqoute-dark white-text';
      $output = '<blockquote ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '
          <footer class="white-text">' . $attrs['author'] . '</footer>
        </blockquote>';
      break;
    case 'bg-gray':
      $output = '<blockquote ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '
        </blockquote>';
      break;
    case 'bg-gray no-margin':
      $output = '<div class = "blog-image text-center"><blockquote ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '
        <footer>' . (isset($attrs['author']) ? $attrs['author'] : '') . '</footer>
        </blockquote></div>';
      break;
    case 'testimonial-style2':
      $attrs['text_color'] = isset($attrs['text_color']) ? $attrs['text_color'] : 'black-text';
      $attrs['text_size'] = isset($attrs['text_size']) ? $attrs['text_size'] : '';
      $text .= '<span class="name ' . $attrs['text_color'] . ' ' . $attrs['text_size'] . '">' . $attrs['author'] . '</span>
        <i class="fa fa-quote-left small-icon yellow-text display-block margin-five no-margin-bottom"></i>';
      $output = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '</div>';
      break;
  }
  
  return $output;  
}

function hcode_shortcodes_shortcode_quote_settings($attrs, $text) {
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array(
      '' => t('White Background'),
      'bg-gray' => t('Gray Background'),
      'bg-gray no-margin' => t('Gray Background Centered'),
      'bg-black' => t('Black Background'),
      'testimonial-style2' => t('Testimonial Style with quote'),
    ),
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '',
    '#attributes' => array('class' => array('form-control','quote-type')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">'
  );
  $form['author'] = array(
    '#type' => 'textfield',
    '#title' => t('Author'),
    '#default_value' => isset($attrs['author']) ? $attrs['author'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
  );
  $form['text_color'] = array(
    '#type' => 'select',
    '#title' => t('Text Color'),
    '#options' => array(
      'black-text' => t('Black'),
      'white-text' => t('White'),
    ),
    '#default_value' => isset($attrs['text_color']) ? $attrs['text_color'] : 'black-text',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
    '#states' => array(
      'visible' => array(
        '.quote-type' => array(
          'value' => 'testimonial-style2',
        )
      )
    )
  );
  $form['text_size'] = array(
    '#type' => 'select',
    '#title' => t('Text Size'),
    '#options' => array(
      '' => t('Default'),
      'text-med' => t('Medium'),
    ),
    '#default_value' => isset($attrs['text_size']) ? $attrs['text_size'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.quote-type' => array(
          'value' => 'testimonial-style2',
        )
      )
    )
  );
  return $form;  
}

function hcode_shortcodes_shortcode_image($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $uri = isset($file->uri) ? $file->uri : '';
  if(!$uri) {
    return '';
  }
  $title = isset($attrs['title']) ? $attrs['title'] : '';
  $attributes = array('style' => '');
  if(isset($attrs['width']) && $attrs['width']) {
    $attributes['style'] .= 'width:' . $attrs['width'] . 'px;';
  }
  if(isset($attrs['height']) && $attrs['height']) {
    $attributes['style'] .= 'height:' . $attrs['height'] . 'px;';
  }
  if(isset($attrs['image_style']) && $attrs['image_style']) {
    $img = theme('image_style', array('style_name' => $attrs['image_style'], 'title' => '', 'path' => $uri, 'attributes' => $attributes));
  }
  else {
    $img = theme('image', array('title' => '', 'path' => $uri, 'attributes' => $attributes));
  }
  $attrs['href'] = isset($attrs['link']) && $attrs['link'] ? $attrs['link'] : '';
  $text = $attrs['href'] ? '<a ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $img . '</a>' : '<span ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $img . '</span>';
  return $text;
}

function hcode_shortcodes_shortcode_image_settings($attrs, $text) {
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Image'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $styles = array('' => t(' - Original - '));
  foreach(image_styles() as $name => $style) {
    $styles[$name] = $style['label'];
  }
  $form['image_style'] = array(
    '#type' => 'select',
    '#title' => t('Image Style'),
    '#options' => $styles,
    '#default_value' => isset($attrs['image_style']) ? $attrs['image_style'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $aligns = array('' => t(' - None - '), 'center' => t('Center'), 'left' => t('Left'), 'right' => t('Right'));
  $form['align'] = array(
    '#type' => 'select',
    '#title' => t('Align'),
    '#options' => $aligns,
    '#default_value' => isset($attrs['align']) ? $attrs['align'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  $form['link'] = array(
    '#type' => 'textfield',
    '#title' => t('Link'),
    '#default_value' => isset($attrs['link']) ? $attrs['link'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => isset($attrs['width']) ? $attrs['width'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
  );
  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => isset($attrs['height']) ? $attrs['height'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hcode_shortcodes_shortcode_tabs($attrs, $text) {
  global $tab_content;
  global $tabs_counter;
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  // Tab Links
  $tabs_counter = !$tabs_counter ? 1 : $tabs_counter + 1;
  $attrs['tab_style'] = isset($attrs['tab_style']) ? $attrs['tab_style'] : 'tab-style1';
  switch($attrs['tab_style']) {
    case 'tab-style1':
    case 'tab-style2':
    case 'tab-style3': 
      $class = 'nav nav-tabs nav-tabs-light text-left';
      $attrs['class'] .= ' ' . $attrs['tab_style'];
      $text = str_replace('<span-replace>', '', $text);
      $text = str_replace('</span-replace>', '', $text);
      $text = str_replace('nav', '', $text);
      $tab_content = str_replace('content_class_replace', 'tab-pane fade in', $tab_content);
      $tab_content = str_replace('<add-on-style>', '', $tab_content);
      $tab_content = str_replace('</add-on-style>', '', $tab_content);
      $text = str_replace('<title_replace>', '', $text);
      $text = str_replace('</title_replace>', '', $text);
      $tabs = '<div class="row">
                <div class="col-md-12 col-sm-12">
                  <ul class="' . $class . '">' . $text . '
                  </ul>
                </div>
              </div>';
      // Tab  Content
      $content = '<div class = "tab-content">' . $tab_content . '</div>';
      // Create tabs 
      $text = $tabs . $content;
      break;
    case 'tab-style4':
    case 'tab-style5':
      $class = 'nav nav-tabs nav-tabs-light pull-left';
      $attrs['class'] .= ' ' . $attrs['tab_style'];
      $text = str_replace('<span-replace>', '', $text);
      $text = str_replace('</span-replace>', '', $text);
      $text = str_replace('nav', '', $text);
      $tab_content = str_replace('content_class_replace', 'tab-pane fade in', $tab_content);
      $tab_content = str_replace('<add-on-style>', '', $tab_content);
      $tab_content = str_replace('</add-on-style>', '', $tab_content);
      $text = str_replace('<title_replace>', '', $text);
      $text = str_replace('</title_replace>', '', $text);
      $tabs = '<ul class="' . $class . '">' . $text . '
              </ul>';
      // Tab  Content
      $content = '<div class = "tab-content position-relative overflow-hidden">' . $tab_content . '</div>';
      // Create tabs 
      $text = '<div class="row">
                <div class="tabs-left col-md-12 col-sm-12">' . $tabs . $content . '
                </div>
              </div>';
      break;
    case 'animated-tab':
      $attrs['id'] = $attrs['tab_style'];
      $class = 'nav nav-tabs margin-five no-margin-top';
      $text = str_replace('<span-replace>', '<span>', $text);
      $text = str_replace('</span-replace>', '</span>', $text);
      if (isset($attrs['wide']) && $attrs['wide']) {
        $tab_content = str_replace('content_class_replace', 'text-center center-col tab-pane fade in', $tab_content);
      }
      else {
        $tab_content = str_replace('content_class_replace', 'col-md-9 col-sm-12 text-center center-col tab-pane fade in', $tab_content);
      }
      $tab_content = str_replace('<add-on-style>', '<div class="tab-pane fade in">', $tab_content);
      $tab_content = str_replace('</add-on-style>', '</div>', $tab_content);
      $text = str_replace('<title_replace>', '</a><br><span class="text-small text-uppercase letter-spacing-3 margin-five font-weight-600 xs-letter-spacing-none xs-display-none">', $text);
      $text = str_replace('</title_replace>', '</span><a href = "#">', $text);
      $tabs = '<ul class="' . $class . '">' . $text . '
              </ul>';
      // Tab  Content
      $content = '<div class = "tab-content">' . $tab_content . '</div>';
      // Create tabs 
      $text = $tabs . $content;
  } 
   
  // Check if there is any attributes
  $attrs = _hcode_shortcodes_shortcode_attributes($attrs);
  $text = $attrs ? '<div ' . $attrs  . '>' . $text . '</div>' : $text;
  // Clear the global variable for next possible tabs
  $tab_content = '';
  return $text;
}

function hcode_shortcodes_shortcode_tabs_settings($attrs, $text) {
  $form['tab_style'] = array(
    '#type' => 'select',
    '#title' => t('Title'),
    '#options' => array(
      'tab-style1' => t('Tab Line'),
      'tab-style2' => t('Tab&Text Box'),
      'tab-style3' => t('Tab Box'),
      'tab-style4' => t('Left Tab Box'),
      'tab-style5' => t('Left Tab&Text Box'),
      'animated-tab' => t('Animated Tab'),
    ),
    '#default_value' => isset($attrs['tab_style']) ? $attrs['tab_style'] : 'tab-style1',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $form['wide'] = array(
    '#title' => t('Wide'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['wide']) ? $attrs['wide'] : FALSE,
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hcode_shortcodes_shortcode_tab($attrs, $text) {
  global $tab_counter;
  global $tab_content;
  $tab_counter++;
  // Tab Link
  $icon = isset($attrs['icon']) && $attrs['icon'] != '' ? '<span-replace><i class="' . $attrs['icon'] . '"></i></span-replace>' : '';
  
  $class = isset($attrs['active']) && $attrs['active'] ? 'class = "active nav"' : 'class = "nav"';
  $output = '<li ' . $class  . '><a data-toggle="tab" href="#tab_sec' . $tab_counter . '">' . $icon . (isset($attrs['title']) ? '<title_replace>' . $attrs['title'] . '</title_replace>' : '') . '</a></li>';
  // Tab Content
  $attrs['class'] = (isset($attrs['class']) ? $attrs['class'] : '') . ' content_class_replace';
  $attrs['class'] .= isset($attrs['active']) && $attrs['active'] ? ' active' : '';
  $attrs['id'] = 'tab_sec' . $tab_counter;
  $tab_content .= '<div ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '><add-on-style>' . $text . '</add-on-style></div>';

  return $output;
}

function hcode_shortcodes_shortcode_tab_settings($attrs, $text) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $form['icon'] = array(
    '#title' => t('Icon'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'admin/ajax/hcode_shortcodes/icons_autocomplete',
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>'
  );
  $form['active'] = array(
    '#title' => t('Active'),
    '#type' => 'checkbox',
    '#default_value' => isset($attrs['active']) ? $attrs['active'] : FALSE,
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hcode_shortcodes_shortcode_drop_caps ($attrs, $text) {
  $attrs['letter'] = isset ($attrs['letter']) ? $attrs['letter'] : '';
  $attrs['class'] = (isset ($attrs['class']) ? $attrs['class'] : 'first-letter') . (isset ($attrs['type']) ? ' ' . $attrs['type'] : '');
  $text = '<span ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $attrs['letter'] . '</span>' . $text;
  return $text;
}

function hcode_shortcodes_shortcode_drop_caps_settings($attrs, $text) {
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array(
      '' => t('Default'),
      'first-letter-block' => t('Block'),
      'first-letter-block-round' => t('Block Round'),
      'first-letter-light' => t('Light'),
      'first-letter-highlight' => t('Highlight'),
      'first-letter-round' => t('Round'),
    ),
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
  );
  $form['letter'] = array(
    '#title' => t('Letter'),
    '#type' => 'textfield',
    '#default_value' => isset($attrs['letter']) ? $attrs['letter'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-4">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hcode_shortcodes_shortcode_deviders_header ($attrs, $text) {
  $attrs['class'] = isset ($attrs['class']) ? $attrs['class'] : '';
  $attrs['type'] = isset ($attrs['type']) ? $attrs['type'] : '';
  if ($attrs['type'] == 'yellow_line') {
    $attrs['class'] .= ' center-col text-center';
    $text .= '<div class="separator-line bg-yellow margin-five"></div>';
  }
  else {
    $attrs['class'] .= ' dividers-header double-line';
    $text = '<div class="subheader bg-white ' . $attrs['type'] . '">' . $text . '</div>';
  }
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '</div>';
  return $text;
}

function hcode_shortcodes_shortcode_deviders_header_settings ($attrs, $text) {
  $form['type'] = array (
    '#type' => 'select',
    '#title' => t('Deviders Type'),
    '#options' => array(
      '' => t('Double Line'),
      'subheader-double-line' => t('Boxed Double Line'),
      'yellow_line' =>t('Yellow line')
    ),
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-4">',
    '#suffix' => '</div></div>'
  );
  return $form;
}

function hcode_shortcodes_shortcode_counter($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? $attrs['class'] : '';
  $attrs['type'] = isset($attrs['type']) ? $attrs['type'] : 'counter';
  $attrs['title'] = isset($attrs['title']) ? $attrs['title'] : '';
  $attrs['description'] = isset($attrs['description']) ? $attrs['description'] : '';
  $attrs['icon'] = isset($attrs['icon']) ? $attrs['icon'] : '';
  $attrs['number'] = isset($attrs['number']) ? $attrs['number'] : '0';
  $attrs['data-number'] = $attrs['number'];
  $attrs['bg'] = isset($attrs['bg']) ? $attrs['bg'] : 'light';
  if ($attrs['type'] == 'counter') {
    $attrs['class'] .= ' counter-section';
    $text = '<i class="' . $attrs['icon'] . ' medium-icon"></i>
            <span id="anim-number-' . str_replace(' ', '_', $attrs['title']) . '" class="counter-number' . ($attrs['bg'] == 'dark' ? ' white-text' : '') . '"></span>
            <span class="counter-title' . ($attrs['bg'] == 'dark' ? ' gray-text' : '') . '">' . $attrs['title'] . '</span>';
  }
  else {
    if ($attrs['bg'] == 'light') {
      $attrs['class'] .= ' chart-style2';
      $text = '<div class="chart-percent">
                <span class="chart2 black-text" data-percent="' . $attrs['number'] . '">
                  <span class="percent"></span>
                  <canvas height="120" width="120"></canvas>
                </span>
              </div>  
              <div class="chart-text">
                <h5 class="black-text">' . $attrs['title'] . '</h5>
                <p>' . $attrs['description'] . '</p>
              </div>';
    }
    else {
      $text = '<div class="chart-percent">
                <span class="chart white-text" data-percent="' . $attrs['number'] . '">
                  <span class="percent">' . $attrs['number'] . '</span>
                  <canvas height="120" width="120"></canvas>
                </span>
              </div>
              <div class="chart-text">
                <h5 class="white-text">' . $attrs['title'] . '</h5>
                <p>' . $attrs['description'] . '</p>
              </div>';
    }
  }
  $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs)  . '>' . $text . '</div>';
  return $text;
}

function hcode_shortcodes_shortcode_counter_settings($attrs, $text) {
  $form['type'] = array(
    '#type' => 'select' ,
    '#title' => t('Type'),
    '#options' => array(
      'counter' => t('Counter'),
      'chart' => t('Round Chart')
    ),
    '#default_value' => isset($attrs['type']) ? $attrs['type'] : 'counter',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"/div><div class = "col-sm-3">',
  );
  $form['title'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
  );
  $form['icon'] = array(
    '#title' => t('Icon'),
    '#type' => 'textfield',
    //'#autocomplete_path' => 'admin/ajax/hcode_shortcodes/icons_autocomplete',
    '#default_value' => isset($attrs['icon']) ? $attrs['icon'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  $form['number'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Number'),
    '#default_value' => isset($attrs['number']) ? $attrs['number'] : '0',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['description'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Description'),
    '#default_value' => isset($attrs['description']) ? $attrs['description'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
  );
  $form['bg'] = array(
    '#type' => 'select' ,
    '#title' => t('Background'),
    '#options' => array(
      'light' => t('Light'),
      'dark' => t('Dark')
    ),
    '#default_value' => isset($attrs['bg']) ? $attrs['bg'] : 'light',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hcode_shortcodes_shortcode_video($attrs, $text) {
  $attrs['class'] = isset($attrs['class']) ? ' ' . $attrs['class'] : '';
  $attrs['height'] = isset($attrs['height']) ? $attrs['height'] : '';
  $video_url = isset($attrs['url']) ? $attrs['url'] : '';
  if (isset($attrs['sound']) && $attrs['sound']){
    $iframe_attrs = isset($attrs['height']) ? ' height="' . $attrs['height'] . '"' : '166';
    $attrs['class'] .= ' sound';
    $text = '<iframe src="' . $video_url . '" ' . $iframe_attrs . '></iframe>';
    $text = '<div ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $text . '</div>';
  }
  else {
    if (isset($attrs['html5_video']) && $attrs['html5_video']) {
      $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : FALSE;
      if($file) {
        switch (substr(file_create_url($file->uri), strrpos(file_create_url($file->uri), '.'))) {
          case '.mp4':
            $source = '<source type="video/mp4" src="' . file_create_url($file->uri) . '">';
            break;
          case '.ogg':
            $source = '<source type="video/ogg" src="' . file_create_url($file->uri) . '">';
            break;
          case '.webm':
            $source = '<source type="video/webm" src="' . file_create_url($file->uri) . '">';
        }
        $text = '<video autoplay muted loop controls ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $source . '</video>';
      }
    }
    else {
      $iframe_attrs = ($attrs['width'] = isset($attrs['width']) ? ' width="' . $attrs['width'] . '"' : '') . ' ' . ($attrs['height'] = isset($attrs['height']) ? ' height="' . $attrs['height'] . '"': '');
      $text = '<iframe ' . _hcode_shortcodes_shortcode_attributes($attrs) . $iframe_attrs. ' src="' . $video_url . '"></iframe>';
    }
  }
  return $text;
}

function hcode_shortcodes_shortcode_video_settings($attrs, $text) {
  $form['sound'] = array(
    '#type' => 'checkbox' ,
    '#title' => t('Sound'),
    '#default_value' => isset($attrs['sound']) ? $attrs['sound'] : FALSE,
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-3">',
  );
  $form['html5_video'] = array(
    '#type' => 'checkbox' ,
    '#title' => t('HTML5 Video'),
    '#default_value' => isset($attrs['html5_video']) ? $attrs['html5_video'] : FALSE,
    '#attributes' => array('class' => array('form-control', 'html5-video')),
    '#prefix' => '</div><div class = "col-sm-3">',
    '#suffix' => '</div></div>',
  );
  //$attrs['url'] = isset($attrs['url']) && $attrs['url'] ? $attrs['url'] : $text;
  $form['url'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Video & Sound Url'),
    '#default_value' => isset($attrs['url']) ? $attrs['url'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#description' => t('Supports: YouTube and Vimeo'),
    '#prefix' => '<div class = "row"><div class = "col-sm-12">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.html5-video' => array(
          'checked' => FALSE,
        )
      )
    )
  );
  $filename = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid'])->uri :'';
  $video = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('HTML5 Video'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $video . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.html5-video' => array(
          'checked' => TRUE,
        )
      )
    )
  );
  $form['width'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Width'),
    '#default_value' => isset($attrs['width']) ? $attrs['width'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $form['height'] = array(
    '#type' => 'textfield' ,
    '#title' => t('Height'),
    '#default_value' => isset($attrs['height']) ? $attrs['height'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>',
  );
  return $form;
}

function hcode_shortcodes_shortcode_header($attrs, $text) {
  $attrs['class'] = (isset($attrs['class']) ? $attrs['class'] : '') . ' page-title';
  $attrs['header_type'] = isset($attrs['header_type']) ? $attrs['header_type'] : '';
  $attrs['title'] = isset($attrs['title']) ? $attrs['title'] : drupal_get_title();
  $attrs['description'] = isset($attrs['description']) ? $attrs['description'] : '';
  
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $filename = isset($file->uri) ? file_create_url($file->uri) : '';
  
  switch ($attrs['header_type']) {
    case 'white': 
      $attrs['class'] .= ' content-top-margin border-bottom-light border-top-light';
      $title = '<h1 class="black-text">' . $attrs['title'] . '</h1>';
      $white_text = '';
      $image = '';
      $separator_color = 'bg-black';
      break;
    case 'gray':
      $attrs['class'] .= ' content-top-margin bg-gray';
      $title = '<h1 class="black-text">' . $attrs['title'] . '</h1>';
      $white_text = '';
      $image = '';
      $separator_color = 'bg-black';
      break;
    case 'dark-gray':
      $attrs['class'] .= ' content-top-margin bg-dark-gray';
      $title = '<h1 class="white-text">' . $attrs['title'] . '</h1>';
      $white_text = 'white-text';
      $image = '';
      $separator_color = 'bg-white';
      break;
    case 'black':
      $attrs['class'] .= ' content-top-margin bg-black';
      $title = '<h1 class="white-text">' . $attrs['title'] . '</h1>';
      $white_text = 'white-text';
      $image = '';
      $separator_color = 'bg-white';
      break;
    case 'image':
      $attrs['class'] .= ' content-top-margin parallax3 parallax-fix';
      $title = '<h1 class="white-text">' . $attrs['title'] . '</h1>';
      $white_text = 'white-text';
      $opacity = isset($attrs['opacity']) ? $attrs['opacity'] : 'opacity-medium';
      $image = '<div class="' . $opacity . ' bg-black"></div>
                <img class="parallax-background-img" src="' . $filename . '"  alt=""/>';
      $separator_color = 'bg-white';
      break;
    case 'image-big':
      $attrs['class'] .= ' page-title parallax3 parallax-fix page-title-large page-title-shop';
      $title = '<h1 class="white-text">' . $attrs['title'] . '</h1>';
      $white_text = 'white-text';
      $opacity = isset($attrs['opacity']) ? $attrs['opacity'] : 'opacity-light';
      $image = '<div class="' . $opacity . ' bg-dark-gray"></div>
                <img class="parallax-background-img" src="' . $filename . '"  alt=""/>';
      $separator_color = 'image-big';
      break;
    case 'large':
      $attrs['class'] .= ' parallax3 parallax-fix page-title-large';
      $title = '<h1 class="white-text">' . $attrs['title'] . '</h1>';
      $white_text = 'white-text';
      $opacity = isset($attrs['opacity']) ? $attrs['opacity'] : 'opacity-medium';
      $image = '<div class="' . $opacity . ' bg-black"></div>
                <img class="parallax-background-img" src="' . $filename . '"  alt=""/>';
      $separator_color = 'bg-yellow';
      break;
    case 'small-white':
      $attrs['class'] .= ' content-top-margin border-bottom-light border-top-light page-title-small';
      $title = '<h1 class="black-text">' . $attrs['title'] . '</h1>';
      $white_text = '';
      $image = '';
      $separator_color = '';
      break;
    case 'small-gray':
      $attrs['class'] .= ' content-top-margin bg-gray page-title-small';
      $title = '<h1 class="black-text">' . $attrs['title'] . '</h1>';
      $white_text = '';
      $image = '';
      $separator_color = '';
      break;
    case 'small-dark-gray':
      $attrs['class'] .= ' content-top-margin bg-dark-gray page-title-small';
      $title = '<h1 class="white-text">' . $attrs['title'] . '</h1>';
      $white_text = 'white-text';
      $image = '';
      $separator_color = '';
      break;
    case 'small-black':
      $attrs['class'] .= ' content-top-margin bg-black page-title-small';
      $title = '<h1 class="white-text">' . $attrs['title'] . '</h1>';
      $white_text = 'white-text';
      $image = '';
      $separator_color = '';
      break;
    case 'center':
      $attrs['class'] .= ' content-top-margin bg-black';
      $title = '<h1 class="white-text">' . $attrs['title'] . '</h1>';
      $white_text = 'white-text';
      $image = '';
      $separator_color = '';
  }
  
  $attrs['class'] .= ' color-' . $separator_color;
  $separator = '';  
  switch ($separator_color) {
    case 'bg-yellow' :
      $separator = '<div class="separator-line bg-yellow no-margin-top margin-four"></div>';
      break;
    case 'image-big':
      $title = '<span class="white-text">' . $attrs['description'] . '</span>' . $title;
      $attrs['description'] = '';
      break;
    default :
      $separator = '<div class="separator-line margin-three ' . $separator_color . ' no-margin-lr sm-margin-top-three sm-margin-bottom-three no-margin-bottom xs-display-none"></div>';
  }
  
  if ($attrs['header_type'] == 'large' || $attrs['header_type'] == 'center') {
    $breadcrumb = '';
  }
  elseif($attrs['header_type'] == 'image-big') {
    $breadcrumb = '<div class="col-md-12 col-sm-12 text-uppercase margin-three no-margin-bottom wow fadeIn animated" data-wow-duration="600ms">
      ' . theme('breadcrumb', array('breadcrumb' => drupal_get_breadcrumb())) . '
    </div>';
  }
  else {
    $breadcrumb = '<div class="col-lg-4 col-md-5 col-sm-12 text-uppercase sm-no-margin-top wow fadeInUp xs-display-none" data-wow-duration="600ms">
      ' . theme('breadcrumb', array('breadcrumb' => drupal_get_breadcrumb())) . '
    </div>';
  }
  if ($separator_color == 'bg-yellow' || $attrs['header_type'] == 'center') {
    $description = '<span class="white-text">' . $attrs['description'] . '</span>';
    $text = '<section ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $image . '
            <div class="container">
                <div class="row">
                    <div class="col-md-12 col-sm-12 text-center animated fadeInUp">' . $separator . $title . $description . '                        
                    </div>                    
                </div>
            </div>
        </section>';
  }
  else {
    if (strpos($attrs['header_type'], 'small') !== FALSE) {
      $description = '';
    }
    else {
      $description = '<span class="' . $white_text . ' xs-display-none">' . $attrs['description'] . '</span>';
    }
    $text = '<section ' . _hcode_shortcodes_shortcode_attributes($attrs) . '>' . $image . '
            <div class="container">
                <div class="row">
                    <div class="col-lg-8 col-md-7 col-sm-12 wow slideInUp wow fadeInUp" data-wow-duration="300ms">' . $title . $description . $separator . '                        
                    </div>' . $breadcrumb . '                    
                </div>
            </div>
        </section>';
  }
  
  return $text;
}  

function hcode_shortcodes_shortcode_header_settings($attrs, $text) {
  $size = array(
    'white' => t('White'),
    'gray' => t('Gray'),
    'dark-gray' => t('Dark Gray'),
    'black' => t('Black'),
    'image' => t('Image'),
    'image-big' => t('Image Big'),
    'large' => t('Large'),
    'small-white' => t('Small White'),
    'small-gray' => t('Small Gray'),
    'small-dark-gray' => t('Small Dark Gray'),
    'small-black' => t('Small Black'),
    'center' => t('Center')
  );
  $form['header_type'] = array(
    '#type' => 'select',
    '#title' => t('Header Type'),
    '#options' => $size,
    '#default_value' => isset($attrs['header_type']) ? $attrs['header_type'] : '',
    '#attributes' => array('class' => array('form-control', 'header-type-select')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
    '#suffix' => '</div></div>'
  );
  $file = isset($attrs['fid']) && !empty($attrs['fid']) ? file_load($attrs['fid']) : '';
  $filename = isset($file->uri) ? $file->uri : '';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['fid'] = array(
    '#type' => 'textfield',
    '#title' => t('Background Image'),
    '#default_value' => isset($attrs['fid']) ? $attrs['fid'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>',
    '#prefix' => '<div class = "row"><div class = "col-sm-8">',
    '#suffix' => '</div></div>',
    '#states' => array(
      'visible' => array(
        '.header-type-select' => array(
          array('value' => 'image'),
          array('value' => 'image-big'),
          array('value' => 'large'),
        )
      )
    )
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Override title'),
    '#default_value' => isset($attrs['title']) ? $attrs['title'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => isset($attrs['description']) ? $attrs['description'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>'
  );
  $form['style_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Override Height'),
    '#default_value' => isset($attrs['style_height']) ? $attrs['style_height'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-sm-6">',
  );
  $opacity = array(
    '' => t('Default'),
    'bgopacity opacity10' => '10%',
    'bgopacity opacity20' => '20%',
    'bgopacity opacity30' => '30%',
    'bgopacity opacity40' => '40%',
    'bgopacity opacity50' => '50%',
    'bgopacity opacity60' => '60%',
    'bgopacity opacity70' => '70%',
    'bgopacity opacity80' => '80%',
    'bgopacity opacity90' => '90%',
  );
  $form['opacity'] = array(
    '#type' => 'select',
    '#title' => t('Opacity Background'),
    '#options' => $opacity,
    '#default_value' => isset($attrs['opacity']) ? $attrs['opacity'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-sm-6">',
    '#suffix' => '</div></div>'
  );
  return $form;
}